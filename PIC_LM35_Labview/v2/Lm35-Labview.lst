CCS PCM C Compiler, Version 5.049, 5967               07-Jun-20 01:13

               Filename:   C:\Users\Saeed\Documents\project\PIC_LM35_Labview\v2\Lm35-Labview.lst

               ROM used:   1229 words (15%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           38 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3CE
0003:  NOP
.................... #include <Lm35-Labview.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,00
0005:  DATA 0C,2A
0006:  DATA E5,36
0007:  DATA 70,10
0008:  DATA E9,39
0009:  DATA 20,26
000A:  DATA EF,3B
000B:  DATA 00,01
000C:  DATA 0C,2A
000D:  DATA E5,36
000E:  DATA 70,10
000F:  DATA E9,39
0010:  DATA 20,27
0011:  DATA 6F,39
0012:  DATA ED,30
0013:  DATA 6C,00
0014:  DATA 0C,2A
0015:  DATA E5,36
0016:  DATA 70,10
0017:  DATA E9,39
0018:  DATA 20,24
0019:  DATA C9,23
001A:  DATA 48,00
*
0132:  MOVLW  8E
0133:  MOVWF  77
0134:  MOVF   28,W
0135:  MOVWF  78
0136:  MOVF   27,W
0137:  MOVWF  79
0138:  CLRF   7A
0139:  MOVF   78,F
013A:  BTFSS  03.2
013B:  GOTO   146
013C:  MOVF   79,W
013D:  MOVWF  78
013E:  CLRF   79
013F:  MOVLW  08
0140:  SUBWF  77,F
0141:  MOVF   78,F
0142:  BTFSS  03.2
0143:  GOTO   146
0144:  CLRF   77
0145:  GOTO   14E
0146:  BCF    03.0
0147:  BTFSC  78.7
0148:  GOTO   14D
0149:  RLF    79,F
014A:  RLF    78,F
014B:  DECF   77,F
014C:  GOTO   146
014D:  BCF    78.7
014E:  BCF    0A.3
014F:  BCF    0A.4
0150:  GOTO   410 (RETURN)
0151:  MOVF   34,W
0152:  BTFSC  03.2
0153:  GOTO   1C1
0154:  MOVWF  3C
0155:  MOVF   38,W
0156:  BTFSC  03.2
0157:  GOTO   1C1
0158:  ADDWF  3C,F
0159:  BTFSC  03.0
015A:  GOTO   162
015B:  MOVLW  7F
015C:  SUBWF  3C,F
015D:  BTFSS  03.0
015E:  GOTO   1C1
015F:  BTFSC  03.2
0160:  GOTO   1C1
0161:  GOTO   166
0162:  MOVLW  81
0163:  ADDWF  3C,F
0164:  BTFSC  03.0
0165:  GOTO   1C1
0166:  MOVF   3C,W
0167:  MOVWF  77
0168:  CLRF   78
0169:  CLRF   79
016A:  CLRF   7A
016B:  MOVF   35,W
016C:  MOVWF  40
016D:  BSF    40.7
016E:  MOVF   36,W
016F:  MOVWF  3F
0170:  MOVF   37,W
0171:  MOVWF  3E
0172:  MOVLW  18
0173:  MOVWF  3C
0174:  CLRF   3D
0175:  BTFSS  3E.0
0176:  GOTO   18F
0177:  MOVF   3B,W
0178:  ADDWF  7A,F
0179:  BTFSS  03.0
017A:  GOTO   181
017B:  INCF   79,F
017C:  BTFSS  03.2
017D:  GOTO   181
017E:  INCF   78,F
017F:  BTFSC  03.2
0180:  BSF    3D.7
0181:  MOVF   3A,W
0182:  ADDWF  79,F
0183:  BTFSS  03.0
0184:  GOTO   188
0185:  INCF   78,F
0186:  BTFSC  03.2
0187:  BSF    3D.7
0188:  MOVF   39,W
0189:  MOVWF  36
018A:  BSF    36.7
018B:  MOVF   36,W
018C:  ADDWF  78,F
018D:  BTFSC  03.0
018E:  BSF    3D.7
018F:  RLF    3D,F
0190:  RRF    78,F
0191:  RRF    79,F
0192:  RRF    7A,F
0193:  RRF    40,F
0194:  RRF    3F,F
0195:  RRF    3E,F
0196:  BCF    03.0
0197:  DECFSZ 3C,F
0198:  GOTO   174
0199:  MOVLW  01
019A:  ADDWF  77,F
019B:  BTFSC  03.0
019C:  GOTO   1C1
019D:  BTFSC  78.7
019E:  GOTO   1A6
019F:  RLF    40,F
01A0:  RLF    7A,F
01A1:  RLF    79,F
01A2:  RLF    78,F
01A3:  DECF   77,F
01A4:  BTFSC  03.2
01A5:  GOTO   1C1
01A6:  BTFSS  40.7
01A7:  GOTO   1B7
01A8:  INCF   7A,F
01A9:  BTFSS  03.2
01AA:  GOTO   1B7
01AB:  INCF   79,F
01AC:  BTFSS  03.2
01AD:  GOTO   1B7
01AE:  INCF   78,F
01AF:  BTFSS  03.2
01B0:  GOTO   1B7
01B1:  RRF    78,F
01B2:  RRF    79,F
01B3:  RRF    7A,F
01B4:  INCF   77,F
01B5:  BTFSC  03.2
01B6:  GOTO   1C1
01B7:  MOVF   35,W
01B8:  MOVWF  3D
01B9:  MOVF   39,W
01BA:  XORWF  3D,F
01BB:  BTFSS  3D.7
01BC:  GOTO   1BF
01BD:  BSF    78.7
01BE:  GOTO   1C5
01BF:  BCF    78.7
01C0:  GOTO   1C5
01C1:  CLRF   77
01C2:  CLRF   78
01C3:  CLRF   79
01C4:  CLRF   7A
01C5:  RETURN
01C6:  BTFSC  03.1
01C7:  GOTO   1CB
01C8:  MOVLW  3C
01C9:  MOVWF  04
01CA:  BCF    03.7
01CB:  CLRF   77
01CC:  CLRF   78
01CD:  CLRF   79
01CE:  CLRF   7A
01CF:  CLRF   3C
01D0:  CLRF   3D
01D1:  CLRF   3E
01D2:  CLRF   3F
01D3:  MOVF   3B,W
01D4:  IORWF  3A,W
01D5:  IORWF  39,W
01D6:  IORWF  38,W
01D7:  BTFSC  03.2
01D8:  GOTO   209
01D9:  MOVLW  20
01DA:  MOVWF  40
01DB:  BCF    03.0
01DC:  RLF    34,F
01DD:  RLF    35,F
01DE:  RLF    36,F
01DF:  RLF    37,F
01E0:  RLF    3C,F
01E1:  RLF    3D,F
01E2:  RLF    3E,F
01E3:  RLF    3F,F
01E4:  MOVF   3B,W
01E5:  SUBWF  3F,W
01E6:  BTFSS  03.2
01E7:  GOTO   1F2
01E8:  MOVF   3A,W
01E9:  SUBWF  3E,W
01EA:  BTFSS  03.2
01EB:  GOTO   1F2
01EC:  MOVF   39,W
01ED:  SUBWF  3D,W
01EE:  BTFSS  03.2
01EF:  GOTO   1F2
01F0:  MOVF   38,W
01F1:  SUBWF  3C,W
01F2:  BTFSS  03.0
01F3:  GOTO   203
01F4:  MOVF   38,W
01F5:  SUBWF  3C,F
01F6:  MOVF   39,W
01F7:  BTFSS  03.0
01F8:  INCFSZ 39,W
01F9:  SUBWF  3D,F
01FA:  MOVF   3A,W
01FB:  BTFSS  03.0
01FC:  INCFSZ 3A,W
01FD:  SUBWF  3E,F
01FE:  MOVF   3B,W
01FF:  BTFSS  03.0
0200:  INCFSZ 3B,W
0201:  SUBWF  3F,F
0202:  BSF    03.0
0203:  RLF    77,F
0204:  RLF    78,F
0205:  RLF    79,F
0206:  RLF    7A,F
0207:  DECFSZ 40,F
0208:  GOTO   1DB
0209:  MOVF   3C,W
020A:  MOVWF  00
020B:  INCF   04,F
020C:  MOVF   3D,W
020D:  MOVWF  00
020E:  INCF   04,F
020F:  MOVF   3E,W
0210:  MOVWF  00
0211:  INCF   04,F
0212:  MOVF   3F,W
0213:  MOVWF  00
0214:  RETURN
0215:  MOVF   04,W
0216:  MOVWF  2C
0217:  MOVF   2B,W
0218:  MOVWF  2E
0219:  BTFSC  03.2
021A:  GOTO   234
021B:  MOVF   2A,W
021C:  MOVWF  37
021D:  MOVF   29,W
021E:  MOVWF  36
021F:  MOVF   28,W
0220:  MOVWF  35
0221:  MOVF   27,W
0222:  MOVWF  34
0223:  CLRF   3B
0224:  CLRF   3A
0225:  MOVLW  20
0226:  MOVWF  39
0227:  MOVLW  82
0228:  MOVWF  38
0229:  CALL   151
022A:  MOVF   7A,W
022B:  MOVWF  2A
022C:  MOVF   79,W
022D:  MOVWF  29
022E:  MOVF   78,W
022F:  MOVWF  28
0230:  MOVF   77,W
0231:  MOVWF  27
0232:  DECFSZ 2E,F
0233:  GOTO   21B
0234:  MOVF   2A,W
0235:  MOVWF  37
0236:  MOVF   29,W
0237:  MOVWF  36
0238:  MOVF   28,W
0239:  MOVWF  35
023A:  MOVF   27,W
023B:  MOVWF  34
023C:  MOVF   34,W
023D:  SUBLW  B6
023E:  MOVWF  34
023F:  CLRF   7A
0240:  MOVF   35,W
0241:  MOVWF  38
0242:  BSF    35.7
0243:  BCF    03.0
0244:  RRF    35,F
0245:  RRF    36,F
0246:  RRF    37,F
0247:  RRF    7A,F
0248:  RRF    79,F
0249:  RRF    78,F
024A:  RRF    77,F
024B:  DECFSZ 34,F
024C:  GOTO   243
024D:  BTFSS  38.7
024E:  GOTO   25A
024F:  COMF   77,F
0250:  COMF   78,F
0251:  COMF   79,F
0252:  COMF   7A,F
0253:  INCF   77,F
0254:  BTFSC  03.2
0255:  INCF   78,F
0256:  BTFSC  03.2
0257:  INCF   79,F
0258:  BTFSC  03.2
0259:  INCF   7A,F
025A:  MOVF   7A,W
025B:  MOVWF  2A
025C:  MOVF   79,W
025D:  MOVWF  29
025E:  MOVF   78,W
025F:  MOVWF  28
0260:  MOVF   77,W
0261:  MOVWF  27
0262:  BTFSS  2A.7
0263:  GOTO   271
0264:  DECF   2C,F
0265:  BSF    2C.5
0266:  COMF   27,F
0267:  COMF   28,F
0268:  COMF   29,F
0269:  COMF   2A,F
026A:  INCF   27,F
026B:  BTFSC  03.2
026C:  INCF   28,F
026D:  BTFSC  03.2
026E:  INCF   29,F
026F:  BTFSC  03.2
0270:  INCF   2A,F
0271:  MOVLW  3B
0272:  MOVWF  33
0273:  MOVLW  9A
0274:  MOVWF  32
0275:  MOVLW  CA
0276:  MOVWF  31
0277:  CLRF   30
0278:  MOVLW  0A
0279:  MOVWF  2E
027A:  MOVF   2B,W
027B:  BTFSC  03.2
027C:  INCF   2C,F
027D:  BSF    03.1
027E:  MOVLW  27
027F:  MOVWF  04
0280:  BCF    03.7
0281:  MOVF   2A,W
0282:  MOVWF  37
0283:  MOVF   29,W
0284:  MOVWF  36
0285:  MOVF   28,W
0286:  MOVWF  35
0287:  MOVF   27,W
0288:  MOVWF  34
0289:  MOVF   33,W
028A:  MOVWF  3B
028B:  MOVF   32,W
028C:  MOVWF  3A
028D:  MOVF   31,W
028E:  MOVWF  39
028F:  MOVF   30,W
0290:  MOVWF  38
0291:  CALL   1C6
0292:  MOVF   78,W
0293:  MOVF   77,F
0294:  BTFSS  03.2
0295:  GOTO   2A9
0296:  INCF   2B,W
0297:  SUBWF  2E,W
0298:  BTFSC  03.2
0299:  GOTO   2A9
029A:  MOVF   2C,W
029B:  BTFSC  03.2
029C:  GOTO   2AB
029D:  ANDLW  0F
029E:  SUBWF  2E,W
029F:  BTFSC  03.2
02A0:  GOTO   2A3
02A1:  BTFSC  03.0
02A2:  GOTO   2DF
02A3:  BTFSC  2C.7
02A4:  GOTO   2DF
02A5:  BTFSC  2C.6
02A6:  GOTO   2AB
02A7:  MOVLW  20
02A8:  GOTO   2DA
02A9:  MOVLW  20
02AA:  ANDWF  2C,F
02AB:  BTFSS  2C.5
02AC:  GOTO   2BA
02AD:  BCF    2C.5
02AE:  MOVF   2B,W
02AF:  BTFSS  03.2
02B0:  DECF   2C,F
02B1:  MOVF   77,W
02B2:  MOVWF  2C
02B3:  MOVLW  2D
02B4:  BTFSS  0C.4
02B5:  GOTO   2B4
02B6:  MOVWF  19
02B7:  MOVF   2C,W
02B8:  MOVWF  77
02B9:  CLRF   2C
02BA:  MOVF   2B,W
02BB:  SUBWF  2E,W
02BC:  BTFSS  03.2
02BD:  GOTO   2C9
02BE:  MOVF   77,W
02BF:  MOVWF  2C
02C0:  MOVLW  2E
02C1:  BTFSS  0C.4
02C2:  GOTO   2C1
02C3:  MOVWF  19
02C4:  MOVF   2C,W
02C5:  MOVWF  77
02C6:  MOVLW  20
02C7:  ANDWF  2C,F
02C8:  MOVLW  00
02C9:  MOVLW  30
02CA:  BTFSS  2C.5
02CB:  GOTO   2DA
02CC:  BCF    2C.5
02CD:  MOVF   2B,W
02CE:  BTFSS  03.2
02CF:  DECF   2C,F
02D0:  MOVF   77,W
02D1:  MOVWF  2C
02D2:  MOVLW  2D
02D3:  BTFSS  0C.4
02D4:  GOTO   2D3
02D5:  MOVWF  19
02D6:  MOVF   2C,W
02D7:  MOVWF  77
02D8:  CLRF   2C
02D9:  MOVLW  30
02DA:  ADDWF  77,F
02DB:  MOVF   77,W
02DC:  BTFSS  0C.4
02DD:  GOTO   2DC
02DE:  MOVWF  19
02DF:  BCF    03.1
02E0:  MOVF   33,W
02E1:  MOVWF  37
02E2:  MOVF   32,W
02E3:  MOVWF  36
02E4:  MOVF   31,W
02E5:  MOVWF  35
02E6:  MOVF   30,W
02E7:  MOVWF  34
02E8:  CLRF   3B
02E9:  CLRF   3A
02EA:  CLRF   39
02EB:  MOVLW  0A
02EC:  MOVWF  38
02ED:  CALL   1C6
02EE:  MOVF   7A,W
02EF:  MOVWF  33
02F0:  MOVF   79,W
02F1:  MOVWF  32
02F2:  MOVF   78,W
02F3:  MOVWF  31
02F4:  MOVF   77,W
02F5:  MOVWF  30
02F6:  DECFSZ 2E,F
02F7:  GOTO   27D
02F8:  BCF    0A.3
02F9:  BCF    0A.4
02FA:  GOTO   43E (RETURN)
*
0339:  MOVF   0B,W
033A:  MOVWF  27
033B:  BCF    0B.7
033C:  BSF    03.5
033D:  BSF    03.6
033E:  BSF    0C.7
033F:  BSF    0C.0
0340:  NOP
0341:  NOP
0342:  BCF    03.5
0343:  BCF    03.6
0344:  BTFSC  27.7
0345:  BSF    0B.7
0346:  BSF    03.6
0347:  MOVF   0C,W
0348:  ANDLW  7F
0349:  BTFSC  03.2
034A:  GOTO   38D
034B:  BCF    03.6
034C:  MOVWF  27
034D:  BSF    03.6
034E:  MOVF   0D,W
034F:  BCF    03.6
0350:  MOVWF  28
0351:  BSF    03.6
0352:  MOVF   0F,W
0353:  BCF    03.6
0354:  MOVWF  29
0355:  MOVF   27,W
0356:  MOVWF  2A
0357:  CALL   30D
0358:  MOVF   28,W
0359:  BSF    03.6
035A:  MOVWF  0D
035B:  BCF    03.6
035C:  MOVF   29,W
035D:  BSF    03.6
035E:  MOVWF  0F
035F:  BCF    03.6
0360:  MOVF   0B,W
0361:  MOVWF  2A
0362:  BCF    0B.7
0363:  BSF    03.5
0364:  BSF    03.6
0365:  BSF    0C.7
0366:  BSF    0C.0
0367:  NOP
0368:  NOP
0369:  BCF    03.5
036A:  BCF    03.6
036B:  BTFSC  2A.7
036C:  BSF    0B.7
036D:  BSF    03.6
036E:  RLF    0C,W
036F:  RLF    0E,W
0370:  ANDLW  7F
0371:  BTFSC  03.2
0372:  GOTO   38D
0373:  BCF    03.6
0374:  MOVWF  27
0375:  BSF    03.6
0376:  MOVF   0D,W
0377:  BCF    03.6
0378:  MOVWF  28
0379:  BSF    03.6
037A:  MOVF   0F,W
037B:  BCF    03.6
037C:  MOVWF  29
037D:  MOVF   27,W
037E:  MOVWF  2A
037F:  CALL   30D
0380:  MOVF   28,W
0381:  BSF    03.6
0382:  MOVWF  0D
0383:  BCF    03.6
0384:  MOVF   29,W
0385:  BSF    03.6
0386:  MOVWF  0F
0387:  INCF   0D,F
0388:  BTFSC  03.2
0389:  INCF   0F,F
038A:  BCF    03.6
038B:  GOTO   339
038C:  BSF    03.6
038D:  BCF    03.6
038E:  RETURN
038F:  MOVF   28,W
0390:  MOVWF  2F
0391:  MOVF   2C,W
0392:  XORWF  2F,F
0393:  BTFSS  2F.7
0394:  GOTO   39A
0395:  BCF    03.2
0396:  BCF    03.0
0397:  BTFSC  28.7
0398:  BSF    03.0
0399:  GOTO   3CD
039A:  MOVF   28,W
039B:  MOVWF  2F
039C:  MOVF   2B,W
039D:  MOVWF  30
039E:  MOVF   27,W
039F:  SUBWF  30,F
03A0:  BTFSC  03.2
03A1:  GOTO   3A8
03A2:  BTFSS  2F.7
03A3:  GOTO   3CD
03A4:  MOVF   03,W
03A5:  XORLW  01
03A6:  MOVWF  03
03A7:  GOTO   3CD
03A8:  MOVF   2C,W
03A9:  MOVWF  30
03AA:  MOVF   28,W
03AB:  SUBWF  30,F
03AC:  BTFSC  03.2
03AD:  GOTO   3B4
03AE:  BTFSS  2F.7
03AF:  GOTO   3CD
03B0:  MOVF   03,W
03B1:  XORLW  01
03B2:  MOVWF  03
03B3:  GOTO   3CD
03B4:  MOVF   2D,W
03B5:  MOVWF  30
03B6:  MOVF   29,W
03B7:  SUBWF  30,F
03B8:  BTFSC  03.2
03B9:  GOTO   3C0
03BA:  BTFSS  2F.7
03BB:  GOTO   3CD
03BC:  MOVF   03,W
03BD:  XORLW  01
03BE:  MOVWF  03
03BF:  GOTO   3CD
03C0:  MOVF   2E,W
03C1:  MOVWF  30
03C2:  MOVF   2A,W
03C3:  SUBWF  30,F
03C4:  BTFSC  03.2
03C5:  GOTO   3CC
03C6:  BTFSS  2F.7
03C7:  GOTO   3CD
03C8:  MOVF   03,W
03C9:  XORLW  01
03CA:  MOVWF  03
03CB:  GOTO   3CD
03CC:  BCF    03.0
03CD:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
001B:  MOVLW  2C
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02E
0021:  MOVLW  06
0022:  MOVWF  78
0023:  CLRF   77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 78,F
0027:  GOTO   023
0028:  MOVLW  7B
0029:  MOVWF  77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  DECFSZ 00,F
002D:  GOTO   021
002E:  RETURN
.................... #use rs232(uart1, baud=9600) 
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B0 
.................... #define LCD_RS_PIN PIN_B1 
.................... #define LCD_RW_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0096:  BSF    06.4
....................    output_float(LCD_DATA5); 
0097:  BSF    06.5
....................    output_float(LCD_DATA6); 
0098:  BSF    06.6
....................    output_float(LCD_DATA7); 
0099:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
009A:  BCF    03.5
009B:  BSF    06.2
009C:  BSF    03.5
009D:  BCF    06.2
....................    delay_cycles(1); 
009E:  NOP
....................    lcd_output_enable(1); 
009F:  BCF    03.5
00A0:  BSF    06.0
00A1:  BSF    03.5
00A2:  BCF    06.0
....................    delay_cycles(1); 
00A3:  NOP
....................    high = lcd_read_nibble(); 
00A4:  BCF    03.5
00A5:  CALL   05D
00A6:  MOVF   78,W
00A7:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
00A8:  BCF    06.0
00A9:  BSF    03.5
00AA:  BCF    06.0
....................    delay_cycles(1); 
00AB:  NOP
....................    lcd_output_enable(1); 
00AC:  BCF    03.5
00AD:  BSF    06.0
00AE:  BSF    03.5
00AF:  BCF    06.0
....................    delay_us(1); 
00B0:  GOTO   0B1
00B1:  GOTO   0B2
00B2:  NOP
....................    low = lcd_read_nibble(); 
00B3:  BCF    03.5
00B4:  CALL   05D
00B5:  MOVF   78,W
00B6:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
00B7:  BCF    06.0
00B8:  BSF    03.5
00B9:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00BA:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00BB:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00BC:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00BD:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BE:  BCF    03.5
00BF:  SWAPF  32,W
00C0:  MOVWF  77
00C1:  MOVLW  F0
00C2:  ANDWF  77,F
00C3:  MOVF   77,W
00C4:  IORWF  31,W
00C5:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005D:  CLRF   33
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
005E:  BSF    03.5
005F:  BSF    06.4
0060:  MOVLW  00
0061:  BCF    03.5
0062:  BTFSC  06.4
0063:  MOVLW  01
0064:  IORWF  33,F
....................    n |= input(LCD_DATA5) << 1; 
0065:  BSF    03.5
0066:  BSF    06.5
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSC  06.5
006A:  MOVLW  01
006B:  MOVWF  77
006C:  BCF    03.0
006D:  RLF    77,F
006E:  MOVF   77,W
006F:  IORWF  33,F
....................    n |= input(LCD_DATA6) << 2; 
0070:  BSF    03.5
0071:  BSF    06.6
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  06.6
0075:  MOVLW  01
0076:  MOVWF  77
0077:  RLF    77,F
0078:  RLF    77,F
0079:  MOVLW  FC
007A:  ANDWF  77,F
007B:  MOVF   77,W
007C:  IORWF  33,F
....................    n |= input(LCD_DATA7) << 3; 
007D:  BSF    03.5
007E:  BSF    06.7
007F:  MOVLW  00
0080:  BCF    03.5
0081:  BTFSC  06.7
0082:  MOVLW  01
0083:  MOVWF  77
0084:  RLF    77,F
0085:  RLF    77,F
0086:  RLF    77,F
0087:  MOVLW  F8
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  33,F
....................     
....................    return(n); 
008B:  MOVF   33,W
008C:  MOVWF  78
....................   #else 
008D:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002F:  BTFSC  32.0
0030:  GOTO   033
0031:  BCF    06.4
0032:  GOTO   034
0033:  BSF    06.4
0034:  BSF    03.5
0035:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0036:  BCF    03.5
0037:  BTFSC  32.1
0038:  GOTO   03B
0039:  BCF    06.5
003A:  GOTO   03C
003B:  BSF    06.5
003C:  BSF    03.5
003D:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003E:  BCF    03.5
003F:  BTFSC  32.2
0040:  GOTO   043
0041:  BCF    06.6
0042:  GOTO   044
0043:  BSF    06.6
0044:  BSF    03.5
0045:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0046:  BCF    03.5
0047:  BTFSC  32.3
0048:  GOTO   04B
0049:  BCF    06.7
004A:  GOTO   04C
004B:  BSF    06.7
004C:  BSF    03.5
004D:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004E:  NOP
....................    lcd_output_enable(1); 
004F:  BCF    03.5
0050:  BSF    06.0
0051:  BSF    03.5
0052:  BCF    06.0
....................    delay_us(2); 
0053:  MOVLW  03
0054:  MOVWF  77
0055:  DECFSZ 77,F
0056:  GOTO   055
....................    lcd_output_enable(0); 
0057:  BCF    03.5
0058:  BCF    06.0
0059:  BSF    03.5
005A:  BCF    06.0
005B:  BCF    03.5
005C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008E:  BSF    03.5
008F:  BCF    06.0
....................    lcd_rs_tris(); 
0090:  BCF    06.1
....................    lcd_rw_tris(); 
0091:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0092:  BCF    03.5
0093:  BCF    06.1
0094:  BSF    03.5
0095:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C6:  MOVF   78,W
00C7:  MOVWF  31
00C8:  BTFSS  31.7
00C9:  GOTO   0CC
00CA:  BSF    03.5
00CB:  GOTO   096
....................    lcd_output_rs(address); 
00CC:  MOVF   2F,F
00CD:  BTFSS  03.2
00CE:  GOTO   0D1
00CF:  BCF    06.1
00D0:  GOTO   0D2
00D1:  BSF    06.1
00D2:  BSF    03.5
00D3:  BCF    06.1
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_rw(0); 
00D5:  BCF    03.5
00D6:  BCF    06.2
00D7:  BSF    03.5
00D8:  BCF    06.2
....................    delay_cycles(1); 
00D9:  NOP
....................    lcd_output_enable(0); 
00DA:  BCF    03.5
00DB:  BCF    06.0
00DC:  BSF    03.5
00DD:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00DE:  BCF    03.5
00DF:  SWAPF  30,W
00E0:  MOVWF  31
00E1:  MOVLW  0F
00E2:  ANDWF  31,F
00E3:  MOVF   31,W
00E4:  MOVWF  32
00E5:  CALL   02F
....................    lcd_send_nibble(n & 0xf); 
00E6:  MOVF   30,W
00E7:  ANDLW  0F
00E8:  MOVWF  31
00E9:  MOVWF  32
00EA:  CALL   02F
00EB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00EC:  MOVLW  28
00ED:  MOVWF  28
00EE:  MOVLW  0C
00EF:  MOVWF  29
00F0:  MOVLW  01
00F1:  MOVWF  2A
00F2:  MOVLW  06
00F3:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00F4:  BCF    06.0
00F5:  BSF    03.5
00F6:  BCF    06.0
....................    lcd_output_rs(0); 
00F7:  BCF    03.5
00F8:  BCF    06.1
00F9:  BSF    03.5
00FA:  BCF    06.1
....................    lcd_output_rw(0); 
00FB:  BCF    03.5
00FC:  BCF    06.2
00FD:  BSF    03.5
00FE:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FF:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0100:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0101:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0102:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0103:  BCF    06.0
....................    lcd_rs_tris(); 
0104:  BCF    06.1
....................    lcd_rw_tris(); 
0105:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0106:  MOVLW  0F
0107:  BCF    03.5
0108:  MOVWF  2C
0109:  CALL   01B
....................    for(i=1;i<=3;++i) 
010A:  MOVLW  01
010B:  MOVWF  27
010C:  MOVF   27,W
010D:  SUBLW  03
010E:  BTFSS  03.0
010F:  GOTO   118
....................    { 
....................        lcd_send_nibble(3); 
0110:  MOVLW  03
0111:  MOVWF  32
0112:  CALL   02F
....................        delay_ms(5); 
0113:  MOVLW  05
0114:  MOVWF  2C
0115:  CALL   01B
0116:  INCF   27,F
0117:  GOTO   10C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0118:  MOVLW  02
0119:  MOVWF  32
011A:  CALL   02F
....................    delay_ms(5); 
011B:  MOVLW  05
011C:  MOVWF  2C
011D:  CALL   01B
....................    for(i=0;i<=3;++i) 
011E:  CLRF   27
011F:  MOVF   27,W
0120:  SUBLW  03
0121:  BTFSS  03.0
0122:  GOTO   12F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0123:  MOVLW  28
0124:  ADDWF  27,W
0125:  MOVWF  04
0126:  BCF    03.7
0127:  MOVF   00,W
0128:  MOVWF  2C
0129:  CLRF   2F
012A:  MOVF   2C,W
012B:  MOVWF  30
012C:  CALL   08E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012D:  INCF   27,F
012E:  GOTO   11F
012F:  BCF    0A.3
0130:  BCF    0A.4
0131:  GOTO   3F2 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
02FB:  DECFSZ 2C,W
02FC:  GOTO   2FE
02FD:  GOTO   301
....................       address=LCD_LINE_TWO; 
02FE:  MOVLW  40
02FF:  MOVWF  2D
0300:  GOTO   302
....................    else 
....................       address=0; 
0301:  CLRF   2D
....................       
....................    address+=x-1; 
0302:  MOVLW  01
0303:  SUBWF  2B,W
0304:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
0305:  MOVF   2D,W
0306:  IORLW  80
0307:  MOVWF  2E
0308:  CLRF   2F
0309:  MOVF   2E,W
030A:  MOVWF  30
030B:  CALL   08E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
030C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
030D:  MOVF   2A,W
030E:  XORLW  07
030F:  BTFSC  03.2
0310:  GOTO   31B
0311:  XORLW  0B
0312:  BTFSC  03.2
0313:  GOTO   320
0314:  XORLW  06
0315:  BTFSC  03.2
0316:  GOTO   328
0317:  XORLW  02
0318:  BTFSC  03.2
0319:  GOTO   32E
031A:  GOTO   333
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
031B:  MOVLW  01
031C:  MOVWF  2B
031D:  MOVWF  2C
031E:  CALL   2FB
031F:  GOTO   338
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0320:  CLRF   2F
0321:  MOVLW  01
0322:  MOVWF  30
0323:  CALL   08E
....................                      delay_ms(2); 
0324:  MOVLW  02
0325:  MOVWF  2C
0326:  CALL   01B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0327:  GOTO   338
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0328:  MOVLW  01
0329:  MOVWF  2B
032A:  MOVLW  02
032B:  MOVWF  2C
032C:  CALL   2FB
032D:  GOTO   338
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
032E:  CLRF   2F
032F:  MOVLW  10
0330:  MOVWF  30
0331:  CALL   08E
0332:  GOTO   338
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0333:  MOVLW  01
0334:  MOVWF  2F
0335:  MOVF   2A,W
0336:  MOVWF  30
0337:  CALL   08E
....................      #endif 
....................    } 
0338:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
03CE:  MOVF   03,W
03CF:  ANDLW  1F
03D0:  MOVWF  03
03D1:  MOVLW  81
03D2:  BSF    03.5
03D3:  MOVWF  19
03D4:  MOVLW  A6
03D5:  MOVWF  18
03D6:  MOVLW  90
03D7:  BCF    03.5
03D8:  MOVWF  18
03D9:  CLRF   21
03DA:  CLRF   20
03DB:  MOVLW  FF
03DC:  MOVWF  22
03DD:  BSF    03.5
03DE:  BSF    1F.0
03DF:  BSF    1F.1
03E0:  BSF    1F.2
03E1:  BCF    1F.3
03E2:  MOVLW  07
03E3:  MOVWF  1C
03E4:  BCF    03.7
.................... { 
.................... float temp; 
....................    setup_adc_ports(AN0); 
03E5:  BCF    1F.0
03E6:  BSF    1F.1
03E7:  BSF    1F.2
03E8:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
03E9:  BCF    1F.6
03EA:  BCF    03.5
03EB:  BSF    1F.6
03EC:  BSF    1F.7
03ED:  BSF    03.5
03EE:  BSF    1F.7
03EF:  BCF    03.5
03F0:  BSF    1F.0
....................  
....................    lcd_init(); 
03F1:  GOTO   0EC
....................    delay_ms(1000); 
03F2:  MOVLW  04
03F3:  MOVWF  27
03F4:  MOVLW  FA
03F5:  MOVWF  2C
03F6:  CALL   01B
03F7:  DECFSZ 27,F
03F8:  GOTO   3F4
.................... while(True) 
....................    { 
.................... set_adc_channel(0); 
03F9:  MOVLW  00
03FA:  MOVWF  78
03FB:  MOVF   1F,W
03FC:  ANDLW  C7
03FD:  IORWF  78,W
03FE:  MOVWF  1F
....................  
.................... delay_us(10); 
03FF:  MOVLW  10
0400:  MOVWF  77
0401:  DECFSZ 77,F
0402:  GOTO   401
0403:  NOP
.................... temp=read_adc(); 
0404:  BSF    1F.2
0405:  BTFSC  1F.2
0406:  GOTO   405
0407:  MOVF   1E,W
0408:  MOVWF  7A
0409:  BSF    03.5
040A:  MOVF   1E,W
040B:  BCF    03.5
040C:  MOVWF  27
040D:  MOVF   1E,W
040E:  MOVWF  28
040F:  GOTO   132
0410:  MOVF   7A,W
0411:  MOVWF  26
0412:  MOVF   79,W
0413:  MOVWF  25
0414:  MOVF   78,W
0415:  MOVWF  24
0416:  MOVF   77,W
0417:  MOVWF  23
.................... temp=temp*0.486; 
0418:  MOVF   26,W
0419:  MOVWF  37
041A:  MOVF   25,W
041B:  MOVWF  36
041C:  MOVF   24,W
041D:  MOVWF  35
041E:  MOVF   23,W
041F:  MOVWF  34
0420:  MOVLW  FE
0421:  MOVWF  3B
0422:  MOVLW  D4
0423:  MOVWF  3A
0424:  MOVLW  78
0425:  MOVWF  39
0426:  MOVLW  7D
0427:  MOVWF  38
0428:  CALL   151
0429:  MOVF   7A,W
042A:  MOVWF  26
042B:  MOVF   79,W
042C:  MOVWF  25
042D:  MOVF   78,W
042E:  MOVWF  24
042F:  MOVF   77,W
0430:  MOVWF  23
....................        
....................      printf("%f",temp); 
0431:  MOVLW  89
0432:  MOVWF  04
0433:  MOVF   26,W
0434:  MOVWF  2A
0435:  MOVF   25,W
0436:  MOVWF  29
0437:  MOVF   24,W
0438:  MOVWF  28
0439:  MOVF   23,W
043A:  MOVWF  27
043B:  MOVLW  02
043C:  MOVWF  2B
043D:  GOTO   215
....................      printf("\n"); 
043E:  MOVLW  0A
043F:  BTFSS  0C.4
0440:  GOTO   43F
0441:  MOVWF  19
....................      delay_ms(500); 
0442:  MOVLW  02
0443:  MOVWF  27
0444:  MOVLW  FA
0445:  MOVWF  2C
0446:  CALL   01B
0447:  DECFSZ 27,F
0448:  GOTO   444
....................      lcd_putc("\f"); 
0449:  MOVLW  04
044A:  BSF    03.6
044B:  MOVWF  0D
044C:  MOVLW  00
044D:  MOVWF  0F
044E:  BCF    03.6
044F:  CALL   339
....................       if(temp<15) 
0450:  MOVF   26,W
0451:  MOVWF  2A
0452:  MOVF   25,W
0453:  MOVWF  29
0454:  MOVF   24,W
0455:  MOVWF  28
0456:  MOVF   23,W
0457:  MOVWF  27
0458:  CLRF   2E
0459:  CLRF   2D
045A:  MOVLW  70
045B:  MOVWF  2C
045C:  MOVLW  82
045D:  MOVWF  2B
045E:  CALL   38F
045F:  BTFSS  03.0
0460:  GOTO   472
....................       {  
....................          OUTPUT_C(0x01); 
0461:  MOVLW  00
0462:  MOVWF  22
0463:  BSF    03.5
0464:  CLRF   07
0465:  MOVLW  01
0466:  BCF    03.5
0467:  MOVWF  07
....................          delay_ms(100); 
0468:  MOVLW  64
0469:  MOVWF  2C
046A:  CALL   01B
....................          lcd_putc("\fTemp is Low"); 
046B:  MOVLW  05
046C:  BSF    03.6
046D:  MOVWF  0D
046E:  MOVLW  00
046F:  MOVWF  0F
0470:  BCF    03.6
0471:  CALL   339
....................       } 
....................       if(temp>=15 && temp<30) 
0472:  CLRF   2A
0473:  CLRF   29
0474:  MOVLW  70
0475:  MOVWF  28
0476:  MOVLW  82
0477:  MOVWF  27
0478:  MOVF   26,W
0479:  MOVWF  2E
047A:  MOVF   25,W
047B:  MOVWF  2D
047C:  MOVF   24,W
047D:  MOVWF  2C
047E:  MOVF   23,W
047F:  MOVWF  2B
0480:  CALL   38F
0481:  BTFSC  03.0
0482:  GOTO   485
0483:  BTFSS  03.2
0484:  GOTO   4A7
0485:  MOVF   26,W
0486:  MOVWF  2A
0487:  MOVF   25,W
0488:  MOVWF  29
0489:  MOVF   24,W
048A:  MOVWF  28
048B:  MOVF   23,W
048C:  MOVWF  27
048D:  CLRF   2E
048E:  CLRF   2D
048F:  MOVLW  70
0490:  MOVWF  2C
0491:  MOVLW  83
0492:  MOVWF  2B
0493:  CALL   38F
0494:  BTFSS  03.0
0495:  GOTO   4A7
....................       { 
....................          OUTPUT_C(0x02); 
0496:  MOVLW  00
0497:  MOVWF  22
0498:  BSF    03.5
0499:  CLRF   07
049A:  MOVLW  02
049B:  BCF    03.5
049C:  MOVWF  07
....................          delay_ms(100); 
049D:  MOVLW  64
049E:  MOVWF  2C
049F:  CALL   01B
....................          lcd_putc("\fTemp is Normal"); 
04A0:  MOVLW  0C
04A1:  BSF    03.6
04A2:  MOVWF  0D
04A3:  MOVLW  00
04A4:  MOVWF  0F
04A5:  BCF    03.6
04A6:  CALL   339
....................       } 
....................       if(temp>=30) 
04A7:  CLRF   2A
04A8:  CLRF   29
04A9:  MOVLW  70
04AA:  MOVWF  28
04AB:  MOVLW  83
04AC:  MOVWF  27
04AD:  MOVF   26,W
04AE:  MOVWF  2E
04AF:  MOVF   25,W
04B0:  MOVWF  2D
04B1:  MOVF   24,W
04B2:  MOVWF  2C
04B3:  MOVF   23,W
04B4:  MOVWF  2B
04B5:  CALL   38F
04B6:  BTFSC  03.0
04B7:  GOTO   4BA
04B8:  BTFSS  03.2
04B9:  GOTO   4CB
....................       { 
....................          OUTPUT_C(0x04); 
04BA:  MOVLW  00
04BB:  MOVWF  22
04BC:  BSF    03.5
04BD:  CLRF   07
04BE:  MOVLW  04
04BF:  BCF    03.5
04C0:  MOVWF  07
....................          delay_ms(100); 
04C1:  MOVLW  64
04C2:  MOVWF  2C
04C3:  CALL   01B
....................          lcd_putc("\fTemp is HIGH"); 
04C4:  MOVLW  14
04C5:  BSF    03.6
04C6:  MOVWF  0D
04C7:  MOVLW  00
04C8:  MOVWF  0F
04C9:  BCF    03.6
04CA:  CALL   339
....................       } 
04CB:  GOTO   3F9
....................      
....................    } 
....................    } 
.................... //} 
04CC:  SLEEP
....................  

Configuration Fuses:
   Word  1: 2F42   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
