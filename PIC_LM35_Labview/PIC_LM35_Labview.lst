CCS PCM C Compiler, Version 5.049, 5967               05-Jun-20 02:13

               Filename:   C:\Users\Saeed\Documents\project\PIC_LM35_Labview\PIC_LM35_Labview.lst

               ROM used:   478 words (6%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           28 (8%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1AC
0003:  NOP
.................... #include <16f877a.h> //Micro Name 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA F4,32
0005:  DATA 6D,38
0006:  DATA 65,39
0007:  DATA 61,3A
0008:  DATA 75,39
0009:  DATA E5,1E
000A:  DATA 00,00
*
00E6:  MOVF   0B,W
00E7:  MOVWF  27
00E8:  BCF    0B.7
00E9:  BSF    03.5
00EA:  BSF    03.6
00EB:  BSF    0C.7
00EC:  BSF    0C.0
00ED:  NOP
00EE:  NOP
00EF:  BCF    03.5
00F0:  BCF    03.6
00F1:  BTFSC  27.7
00F2:  BSF    0B.7
00F3:  BSF    03.6
00F4:  MOVF   0C,W
00F5:  ANDLW  7F
00F6:  BTFSC  03.2
00F7:  GOTO   13A
00F8:  BCF    03.6
00F9:  MOVWF  27
00FA:  BSF    03.6
00FB:  MOVF   0D,W
00FC:  BCF    03.6
00FD:  MOVWF  28
00FE:  BSF    03.6
00FF:  MOVF   0F,W
0100:  BCF    03.6
0101:  MOVWF  29
0102:  MOVF   27,W
0103:  MOVWF  2D
0104:  CALL   0B8
0105:  MOVF   28,W
0106:  BSF    03.6
0107:  MOVWF  0D
0108:  BCF    03.6
0109:  MOVF   29,W
010A:  BSF    03.6
010B:  MOVWF  0F
010C:  BCF    03.6
010D:  MOVF   0B,W
010E:  MOVWF  2A
010F:  BCF    0B.7
0110:  BSF    03.5
0111:  BSF    03.6
0112:  BSF    0C.7
0113:  BSF    0C.0
0114:  NOP
0115:  NOP
0116:  BCF    03.5
0117:  BCF    03.6
0118:  BTFSC  2A.7
0119:  BSF    0B.7
011A:  BSF    03.6
011B:  RLF    0C,W
011C:  RLF    0E,W
011D:  ANDLW  7F
011E:  BTFSC  03.2
011F:  GOTO   13A
0120:  BCF    03.6
0121:  MOVWF  27
0122:  BSF    03.6
0123:  MOVF   0D,W
0124:  BCF    03.6
0125:  MOVWF  28
0126:  BSF    03.6
0127:  MOVF   0F,W
0128:  BCF    03.6
0129:  MOVWF  29
012A:  MOVF   27,W
012B:  MOVWF  2D
012C:  CALL   0B8
012D:  MOVF   28,W
012E:  BSF    03.6
012F:  MOVWF  0D
0130:  BCF    03.6
0131:  MOVF   29,W
0132:  BSF    03.6
0133:  MOVWF  0F
0134:  INCF   0D,F
0135:  BTFSC  03.2
0136:  INCF   0F,F
0137:  BCF    03.6
0138:  GOTO   0E6
0139:  BSF    03.6
013A:  BCF    03.6
013B:  BCF    0A.3
013C:  BCF    0A.4
013D:  GOTO   1C9 (RETURN)
013E:  MOVF   2E,W
013F:  CLRF   78
0140:  SUBWF  2D,W
0141:  BTFSC  03.0
0142:  GOTO   146
0143:  MOVF   2D,W
0144:  MOVWF  77
0145:  GOTO   152
0146:  CLRF   77
0147:  MOVLW  08
0148:  MOVWF  2F
0149:  RLF    2D,F
014A:  RLF    77,F
014B:  MOVF   2E,W
014C:  SUBWF  77,W
014D:  BTFSC  03.0
014E:  MOVWF  77
014F:  RLF    78,F
0150:  DECFSZ 2F,F
0151:  GOTO   149
0152:  RETURN
0153:  MOVLW  20
0154:  BTFSS  28.4
0155:  MOVLW  30
0156:  MOVWF  29
0157:  MOVF   27,W
0158:  MOVWF  77
0159:  BTFSS  27.7
015A:  GOTO   163
015B:  COMF   77,F
015C:  INCF   77,F
015D:  MOVF   77,W
015E:  MOVWF  27
015F:  MOVLW  2D
0160:  MOVWF  29
0161:  BSF    28.7
0162:  BSF    28.0
0163:  MOVF   27,W
0164:  MOVWF  2D
0165:  MOVLW  64
0166:  MOVWF  2E
0167:  CALL   13E
0168:  MOVF   77,W
0169:  MOVWF  27
016A:  MOVLW  30
016B:  ADDWF  78,W
016C:  MOVWF  2A
016D:  MOVF   27,W
016E:  MOVWF  2D
016F:  MOVLW  0A
0170:  MOVWF  2E
0171:  CALL   13E
0172:  MOVLW  30
0173:  ADDWF  77,W
0174:  MOVWF  2C
0175:  MOVLW  30
0176:  ADDWF  78,W
0177:  MOVWF  2B
0178:  MOVF   29,W
0179:  MOVWF  77
017A:  MOVLW  30
017B:  SUBWF  2A,W
017C:  BTFSC  03.2
017D:  GOTO   182
017E:  BSF    28.1
017F:  BTFSC  28.7
0180:  BSF    28.2
0181:  GOTO   196
0182:  MOVF   29,W
0183:  MOVWF  2A
0184:  MOVLW  20
0185:  MOVWF  29
0186:  MOVLW  30
0187:  SUBWF  2B,W
0188:  BTFSC  03.2
0189:  GOTO   18E
018A:  BSF    28.0
018B:  BTFSC  28.7
018C:  BSF    28.1
018D:  GOTO   196
018E:  BTFSS  03.2
018F:  BSF    28.0
0190:  BTFSS  03.2
0191:  GOTO   196
0192:  MOVF   2A,W
0193:  MOVWF  2B
0194:  MOVLW  20
0195:  MOVWF  2A
0196:  BTFSC  28.2
0197:  GOTO   19D
0198:  BTFSC  28.1
0199:  GOTO   1A0
019A:  BTFSC  28.0
019B:  GOTO   1A3
019C:  GOTO   1A6
019D:  MOVF   29,W
019E:  MOVWF  2D
019F:  CALL   0B8
01A0:  MOVF   2A,W
01A1:  MOVWF  2D
01A2:  CALL   0B8
01A3:  MOVF   2B,W
01A4:  MOVWF  2D
01A5:  CALL   0B8
01A6:  MOVF   2C,W
01A7:  MOVWF  2D
01A8:  CALL   0B8
01A9:  BCF    0A.3
01AA:  BCF    0A.4
01AB:  GOTO   1DC (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #use delay(clock=1000000) // Oscillator Frequency 
*
000B:  MOVLW  2C
000C:  MOVWF  04
000D:  BCF    03.7
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   017
0011:  MOVLW  52
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   011
0017:  RETURN
.................... #fuses Hs,nowdt// Micro is High Ferquency And No watchdog 
.................... #define use_portb_lcd true 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
002F:  MOVLW  0F
0030:  BSF    03.5
0031:  ANDWF  06,W
0032:  IORLW  F0
0033:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0034:  BCF    03.5
0035:  BSF    06.2
....................    delay_cycles(1); 
0036:  NOP
....................    lcd_output_enable(1); 
0037:  BSF    06.0
....................    delay_cycles(1); 
0038:  NOP
....................    high = lcd_read_nibble(); 
0039:  CALL   023
003A:  MOVF   78,W
003B:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
003C:  BCF    06.0
....................    delay_cycles(1); 
003D:  NOP
....................    lcd_output_enable(1); 
003E:  BSF    06.0
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
003F:  CALL   023
0040:  MOVF   78,W
0041:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
0042:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0043:  MOVLW  0F
0044:  BSF    03.5
0045:  ANDWF  06,W
0046:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0047:  BCF    03.5
0048:  SWAPF  35,W
0049:  MOVWF  77
004A:  MOVLW  F0
004B:  ANDWF  77,F
004C:  MOVF   77,W
004D:  IORWF  34,W
004E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0023:  MOVF   06,W
0024:  MOVWF  77
0025:  SWAPF  06,W
0026:  ANDLW  0F
0027:  MOVWF  78
....................   #endif 
0028:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0018:  SWAPF  35,W
0019:  ANDLW  F0
001A:  MOVWF  77
001B:  MOVLW  0F
001C:  ANDWF  06,W
001D:  IORWF  77,W
001E:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
001F:  NOP
....................    lcd_output_enable(1); 
0020:  BSF    06.0
....................    delay_us(2); 
....................    lcd_output_enable(0); 
0021:  BCF    06.0
0022:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0029:  BSF    03.5
002A:  BCF    06.0
....................    lcd_rs_tris(); 
002B:  BCF    06.1
....................    lcd_rw_tris(); 
002C:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
002D:  BCF    03.5
002E:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
004F:  MOVF   78,W
0050:  MOVWF  34
0051:  BTFSC  34.7
0052:  GOTO   02F
....................    lcd_output_rs(address); 
0053:  BTFSS  32.0
0054:  BCF    06.1
0055:  BTFSC  32.0
0056:  BSF    06.1
....................    delay_cycles(1); 
0057:  NOP
....................    lcd_output_rw(0); 
0058:  BCF    06.2
....................    delay_cycles(1); 
0059:  NOP
....................    lcd_output_enable(0); 
005A:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
005B:  SWAPF  33,W
005C:  MOVWF  34
005D:  MOVLW  0F
005E:  ANDWF  34,F
005F:  MOVF   34,W
0060:  MOVWF  35
0061:  CALL   018
....................    lcd_send_nibble(n & 0xf); 
0062:  MOVF   33,W
0063:  ANDLW  0F
0064:  MOVWF  34
0065:  MOVWF  35
0066:  CALL   018
0067:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0068:  MOVLW  28
0069:  MOVWF  28
006A:  MOVLW  0C
006B:  MOVWF  29
006C:  MOVLW  01
006D:  MOVWF  2A
006E:  MOVLW  06
006F:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0070:  BCF    06.0
....................    lcd_output_rs(0); 
0071:  BCF    06.1
....................    lcd_output_rw(0); 
0072:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0073:  MOVLW  0F
0074:  BSF    03.5
0075:  ANDWF  06,W
0076:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0077:  BCF    06.0
....................    lcd_rs_tris(); 
0078:  BCF    06.1
....................    lcd_rw_tris(); 
0079:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
007A:  MOVLW  0F
007B:  BCF    03.5
007C:  MOVWF  2C
007D:  CALL   00B
....................    for(i=1;i<=3;++i) 
007E:  MOVLW  01
007F:  MOVWF  27
0080:  MOVF   27,W
0081:  SUBLW  03
0082:  BTFSS  03.0
0083:  GOTO   08C
....................    { 
....................        lcd_send_nibble(3); 
0084:  MOVLW  03
0085:  MOVWF  35
0086:  CALL   018
....................        delay_ms(5); 
0087:  MOVLW  05
0088:  MOVWF  2C
0089:  CALL   00B
008A:  INCF   27,F
008B:  GOTO   080
....................    } 
....................     
....................    lcd_send_nibble(2); 
008C:  MOVLW  02
008D:  MOVWF  35
008E:  CALL   018
....................    delay_ms(5); 
008F:  MOVLW  05
0090:  MOVWF  2C
0091:  CALL   00B
....................    for(i=0;i<=3;++i) 
0092:  CLRF   27
0093:  MOVF   27,W
0094:  SUBLW  03
0095:  BTFSS  03.0
0096:  GOTO   0A3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0097:  MOVLW  28
0098:  ADDWF  27,W
0099:  MOVWF  04
009A:  BCF    03.7
009B:  MOVF   00,W
009C:  MOVWF  2C
009D:  CLRF   32
009E:  MOVF   2C,W
009F:  MOVWF  33
00A0:  CALL   029
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A1:  INCF   27,F
00A2:  GOTO   093
00A3:  BCF    0A.3
00A4:  BCF    0A.4
00A5:  GOTO   1C2 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00A6:  DECFSZ 2F,W
00A7:  GOTO   0A9
00A8:  GOTO   0AC
....................       address=LCD_LINE_TWO; 
00A9:  MOVLW  40
00AA:  MOVWF  30
00AB:  GOTO   0AD
....................    else 
....................       address=0; 
00AC:  CLRF   30
....................       
....................    address+=x-1; 
00AD:  MOVLW  01
00AE:  SUBWF  2E,W
00AF:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
00B0:  MOVF   30,W
00B1:  IORLW  80
00B2:  MOVWF  31
00B3:  CLRF   32
00B4:  MOVF   31,W
00B5:  MOVWF  33
00B6:  CALL   029
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B7:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00B8:  MOVF   2D,W
00B9:  XORLW  07
00BA:  BTFSC  03.2
00BB:  GOTO   0C6
00BC:  XORLW  0B
00BD:  BTFSC  03.2
00BE:  GOTO   0CB
00BF:  XORLW  06
00C0:  BTFSC  03.2
00C1:  GOTO   0D5
00C2:  XORLW  02
00C3:  BTFSC  03.2
00C4:  GOTO   0DB
00C5:  GOTO   0E0
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00C6:  MOVLW  01
00C7:  MOVWF  2E
00C8:  MOVWF  2F
00C9:  CALL   0A6
00CA:  GOTO   0E5
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00CB:  CLRF   32
00CC:  MOVLW  01
00CD:  MOVWF  33
00CE:  CALL   029
....................                      delay_ms(2); 
00CF:  MOVLW  A6
00D0:  MOVWF  77
00D1:  DECFSZ 77,F
00D2:  GOTO   0D1
00D3:  NOP
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00D4:  GOTO   0E5
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00D5:  MOVLW  01
00D6:  MOVWF  2E
00D7:  MOVLW  02
00D8:  MOVWF  2F
00D9:  CALL   0A6
00DA:  GOTO   0E5
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00DB:  CLRF   32
00DC:  MOVLW  10
00DD:  MOVWF  33
00DE:  CALL   029
00DF:  GOTO   0E5
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E0:  MOVLW  01
00E1:  MOVWF  32
00E2:  MOVF   2D,W
00E3:  MOVWF  33
00E4:  CALL   029
....................      #endif 
....................    } 
00E5:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main(){ 
*
01AC:  MOVF   03,W
01AD:  ANDLW  1F
01AE:  MOVWF  03
01AF:  CLRF   21
01B0:  CLRF   20
01B1:  BSF    03.5
01B2:  BSF    1F.0
01B3:  BSF    1F.1
01B4:  BSF    1F.2
01B5:  BCF    1F.3
01B6:  MOVLW  07
01B7:  MOVWF  1C
01B8:  BCF    03.7
....................  
.................... int temp; 
.................... float temp2; 
.................... setup_adc(ADC_CLOCK_INTERNAL); 
01B9:  BCF    1F.6
01BA:  BCF    03.5
01BB:  BSF    1F.6
01BC:  BSF    1F.7
01BD:  BSF    03.5
01BE:  BSF    1F.7
01BF:  BCF    03.5
01C0:  BSF    1F.0
.................... lcd_init(); 
01C1:  GOTO   068
....................  
....................  
.................... while(true){ 
.................... lcd_putc("temperature="); 
01C2:  MOVLW  04
01C3:  BSF    03.6
01C4:  MOVWF  0D
01C5:  MOVLW  00
01C6:  MOVWF  0F
01C7:  BCF    03.6
01C8:  GOTO   0E6
.................... set_adc_channel(0); 
01C9:  MOVLW  00
01CA:  MOVWF  78
01CB:  MOVF   1F,W
01CC:  ANDLW  C7
01CD:  IORWF  78,W
01CE:  MOVWF  1F
.................... delay_us(10); 
01CF:  GOTO   1D0
.................... temp=read_adc(); 
01D0:  BSF    1F.2
01D1:  BTFSC  1F.2
01D2:  GOTO   1D1
01D3:  BSF    03.5
01D4:  MOVF   1E,W
01D5:  BCF    03.5
01D6:  MOVWF  22
.................... printf(lcd_putc, "%d",temp); 
01D7:  MOVF   22,W
01D8:  MOVWF  27
01D9:  MOVLW  18
01DA:  MOVWF  28
01DB:  GOTO   153
01DC:  GOTO   1C2
.................... } 
.................... } 
....................  
01DD:  SLEEP
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2F42   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
