D G "__PCM__" 0 34 ""5.049""
D G "__DEVICE__" 0 34 "322"
D G "__DATE__" 0 34 ""17-Nov-19""
D G "__TIME__" 0 34 ""23:15:46""
D G "_UNICODE" 0 34 ""?""
D G "__EVAL" 0 34 ""?"" "Standard Header file for the PIC10LF322 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 37 ""
v L "value" 2 37 "int8" `54 
f B "set_tris_a" 2 37 "void(int8 value)" `53 
f N "get_tris_a" 2 38 ""
f B "get_tris_a" 2 38 "int8()" `55 
f N "output_a" 2 39 ""
v L "value" 2 39 "int8" `57 
f B "output_a" 2 39 "void(int8 value)" `56 
f N "input_a" 2 40 ""
f B "input_a" 2 40 "int8()" `58 
f N "input_change_a" 2 41 ""
f B "input_change_a" 2 41 "int8()" `59 
f N "port_a_pullups" 2 42 ""
v L "upmask" 2 42 "int8" `61 
f B "port_a_pullups" 2 42 "void(int8 upmask)" `60 
f N "input" 2 43 ""
v L "pin" 2 43 "int16" `63 
f B "input" 2 43 "int8(int16 pin)" `62 
f N "input_state" 2 44 ""
v L "pin" 2 44 "int16" `65 
f B "input_state" 2 44 "int8(int16 pin)" `64 
f N "output_low" 2 45 ""
v L "pin" 2 45 "int16" `67 
f B "output_low" 2 45 "void(int16 pin)" `66 
f N "output_high" 2 46 ""
v L "pin" 2 46 "int16" `69 
f B "output_high" 2 46 "void(int16 pin)" `68 
f N "output_toggle" 2 47 ""
v L "pin" 2 47 "int16" `71 
f B "output_toggle" 2 47 "void(int16 pin)" `70 
f N "output_bit" 2 48 ""
v L "pin" 2 48 "int16" `73 
v L "level" 2 48 "int8" `74 
f B "output_bit" 2 48 "void(int16 pin,int8 level)" `72 
f N "output_float" 2 49 ""
v L "pin" 2 49 "int16" `76 
f B "output_float" 2 49 "void(int16 pin)" `75 
f N "output_drive" 2 50 ""
v L "pin" 2 50 "int16" `78 
f B "output_drive" 2 50 "void(int16 pin)" `77  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 54 "40"
d G "PIN_A1" 2 55 "41"
d G "PIN_A2" 2 56 "42"
d G "PIN_A3" 2 57 "43"
d G "FALSE" 2 60 "0"
d G "TRUE" 2 61 "1"
d G "BYTE" 2 63 "int8"
d G "BOOLEAN" 2 64 "int1"
d G "getc" 2 66 "getch"
d G "fgetc" 2 67 "getch"
d G "getchar" 2 68 "getch"
d G "putc" 2 69 "putchar"
d G "fputc" 2 70 "putchar"
d G "fgets" 2 71 "gets"
d G "fputs" 2 72 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 77 ""
f B "restart_cause" 2 77 "int8()" `79 
f N "reset_cpu" 2 78 ""
f B "reset_cpu" 2 78 "void()" `80 
f N "sleep" 2 79 ""
f B "sleep" 2 79 "void()" `81  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 81 "3"
d G "WDT_TIMEOUT" 2 82 "11"
d G "MCLR_FROM_SLEEP" 2 83 "19"
d G "MCLR_FROM_RUN" 2 84 "27"
d G "NORMAL_POWER_UP" 2 85 "25"
d G "BROWNOUT_RESTART" 2 86 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 93 ""
v L "mode" 2 93 "int8" `83 
f B "setup_timer_0" 2 93 "void(int8 mode)" `82 
f N "set_timer0" 2 94 ""
v L "value" 2 94 "int8" `85 
f B "set_timer0" 2 94 "void(int8 value)" `84 
f N "get_timer0" 2 95 ""
f B "get_timer0" 2 95 "int8()" `86 
f N "setup_counters" 2 96 ""
v L "mode" 2 96 "int8" `88 
v L "prescaler" 2 96 "int8" `89 
f B "setup_counters" 2 96 "void(int8 mode,int8 prescaler)" `87 
f N "set_rtcc" 2 97 ""
v L "value" 2 97 "int8" `91 
f B "set_rtcc" 2 97 "void(int8 value)" `90 
f N "get_rtcc" 2 98 ""
f B "get_rtcc" 2 98 "int8()" `92  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 100 "0"
d G "T0_EXT_L_TO_H" 2 101 "32"
d G "T0_EXT_H_TO_L" 2 102 "48"
d G "T0_DIV_1" 2 104 "8"
d G "T0_DIV_2" 2 105 "0"
d G "T0_DIV_4" 2 106 "1"
d G "T0_DIV_8" 2 107 "2"
d G "T0_DIV_16" 2 108 "3"
d G "T0_DIV_32" 2 109 "4"
d G "T0_DIV_64" 2 110 "5"
d G "T0_DIV_128" 2 111 "6"
d G "T0_DIV_256" 2 112 "7"
d G "T0_8_BIT" 2 115 "0"
d G "RTCC_INTERNAL" 2 119 "0"
d G "RTCC_EXT_L_TO_H" 2 120 "32"
d G "RTCC_EXT_H_TO_L" 2 121 "48"
d G "RTCC_DIV_1" 2 122 "8"
d G "RTCC_DIV_2" 2 123 "0"
d G "RTCC_DIV_4" 2 124 "1"
d G "RTCC_DIV_8" 2 125 "2"
d G "RTCC_DIV_16" 2 126 "3"
d G "RTCC_DIV_32" 2 127 "4"
d G "RTCC_DIV_64" 2 128 "5"
d G "RTCC_DIV_128" 2 129 "6"
d G "RTCC_DIV_256" 2 130 "7"
d G "RTCC_8_BIT" 2 131 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
f N "setup_wdt" 2 141 ""
v L "mode" 2 141 "int8" `94 
f B "setup_wdt" 2 141 "void(int8 mode)" `93 
f N "restart_wdt" 2 142 ""
f B "restart_wdt" 2 142 "void()" `95  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 144 "0x01"
d G "WDT_OFF" 2 145 "0x00"
d G "WDT_1MS" 2 147 "0x00"
d G "WDT_2MS" 2 148 "0x02"
d G "WDT_4MS" 2 149 "0x04"
d G "WDT_8MS" 2 150 "0x06"
d G "WDT_16MS" 2 151 "0x08"
d G "WDT_32MS" 2 152 "0x0A"
d G "WDT_64MS" 2 153 "0x0C"
d G "WDT_128MS" 2 154 "0x0E"
d G "WDT_256MS" 2 155 "0x10"
d G "WDT_512MS" 2 156 "0x12"
d G "WDT_1S" 2 157 "0x14"
d G "WDT_2S" 2 158 "0x16"
d G "WDT_4S" 2 159 "0x18"
d G "WDT_8S" 2 160 "0x1A"
d G "WDT_16S" 2 161 "0x1C"
d G "WDT_32S" 2 162 "0x1E"
d G "WDT_64S" 2 163 "0x20"
d G "WDT_128S" 2 164 "0x22"
d G "WDT_256S" 2 165 "0x24"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 170 ""
v L "mode" 2 170 "int8" `97 
v L "period" 2 170 "int8" `98 
v L "postscale" 2 170 "int8" `99 
f B "setup_timer_2" 2 170 "void(int8 mode,int8 period,int8 postscale)" `96 
f N "get_timer2" 2 171 ""
f B "get_timer2" 2 171 "int8()" `100 
f N "set_timer2" 2 172 ""
v L "value" 2 172 "int8" `102 
f B "set_timer2" 2 172 "void(int8 value)" `101  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 174 "0"
d G "T2_DIV_BY_1" 2 175 "4"
d G "T2_DIV_BY_4" 2 176 "5"
d G "T2_DIV_BY_16" 2 177 "6"
c L "set_timer2" 2 3 2 "FUNCTION"
f N "setup_vref" 2 181 ""
v L "mode" 2 181 "int8" `104 
f B "setup_vref" 2 181 "void(int8 mode)" `103  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 183 "0"
d G "VREF_1v024" 2 184 "0x81"
d G "VREF_2v048" 2 185 "0x82"
d G "VREF_4v096" 2 186 "0x83"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 188 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 189 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 190 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 191 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_cwg" 2 196 ""
v L "mode" 2 196 "int32" `106 
v L "shutdown" 2 196 "int16" `107 
v L "dt_rising" 2 196 "int8" `108 
v L "dt_falling" 2 196 "int8" `109 
f B "setup_cwg" 2 196 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `105 
f N "cwg_restart" 2 197 ""
f B "cwg_restart" 2 197 "void()" `110 
f N "cwg_status" 2 198 ""
f B "cwg_status" 2 198 "int8()" `111  "Constants used in SETUP_CWG() first parameter are:"
d G "CWG_ENABLED" 2 200 "0x0080"
d G "CWG_DISABLED" 2 201 "0"
d G "CWG_OUTPUT_A" 2 202 "0x0020"
d G "CWG_OUTPUT_B" 2 203 "0x0040"
d G "CWG_A_INVERTED" 2 204 "0x0008"
d G "CWG_B_INVERTED" 2 205 "0x0010"
d G "CWG_CLOCK_HFINTOSC" 2 206 "0x0001"
d G "CWG_INPUT_PWM1" 2 207 "0x0000"
d G "CWG_INPUT_PWM2" 2 208 "0x0100"
d G "CWG_INPUT_NCO1OUT" 2 209 "0x0200"
d G "CWG_INPUT_LC1OUT" 2 210 "0x0300"
d G "CWG_NO_AUTO_SHUTDOWN" 2 214 "0"
d G "CWG_SHUTDOWN_ON_FLT" 2 215 "0x0001"
d G "CWG_SHUTDOWN_ON_LC1OUT" 2 216 "0x0002"
d G "CWG_AUTO_RESTART" 2 217 "0x0040"
d G "CWG_SHUTDOWN_A_INACTIVE_STATE" 2 219 "0"
d G "CWG_SHUTDOWN_A_TRISTATE" 2 220 "0x1000"
d G "CWG_SHUTDOWN_A_LOW" 2 221 "0x2000"
d G "CWG_SHUTDOWN_A_HIGH" 2 222 "0x3000"
d G "CWG_SHUTDOWN_B_INACTIVE_STATE" 2 224 "0"
d G "CWG_SHUTDOWN_B_TRISTATE" 2 225 "0x4000"
d G "CWG_SHUTDOWN_B_LOW" 2 226 "0x8000"
d G "CWG_SHUTDOWN_B_HIGH" 2 227 "0xC000"
d G "CWG_AUTO_SHUTDOWN" 2 230 "0x80"
c L "cwg_status" 2 3 5 "FUNCTION"
f N "setup_nco" 2 237 ""
v L "mode" 2 237 "int32" `113 
v L "inc_value" 2 237 "int16" `114 
f B "setup_nco" 2 237 "void(int32 mode,int16 inc_value)" `112 
f N "set_nco_inc_value" 2 238 ""
v L "value" 2 238 "int16" `116 
f B "set_nco_inc_value" 2 238 "void(int16 value)" `115 
f N "set_nco_inc_value" 2 239 ""
v L "value" 2 239 "int32" `118 
f B "set_nco_inc_value" 2 239 "void(int32 value)" `117 
f N "set_nco_accumulator" 2 240 ""
v L "value" 2 240 "int32" `120 
f B "set_nco_accumulator" 2 240 "void(int32 value)" `119 
f N "get_nco_accumulator" 2 241 ""
f B "get_nco_accumulator" 2 241 "int32()" `121 
f N "get_nco_inc_value" 2 242 ""
f B "get_nco_inc_value" 2 242 "int16()" `122  "Constants used in SETUP_NCO() first parameter are:"
d G "NCO_ENABLED" 2 244 "0x0080"
d G "NCO_DISABLED" 2 245 "0"
d G "NCO_OUTPUT" 2 246 "0x0040	"
d G "NCO_ACTIVE_HIGH" 2 247 "0x0010"
d G "NCO_ACTIVE_LOW" 2 248 "0"
d G "NCO_PULSE_FREQ_MODE" 2 249 "0x0001"
d G "NCO_FIXED_DUTY_MODE" 2 250 "0"
d G "NCO_CLOCK_LC1OUT" 2 252 "0x0300"
d G "NCO_CLOCK_HFINOSC" 2 253 "0x0200"
d G "NCO_CLOCK_FOSC" 2 254 "0x0100"
d G "NCO_CLOCK_NCO1CLK" 2 255 "0"
d G "NCO_PULSE_WIDTH_1" 2 257 "0"
d G "NCO_PULSE_WIDTH_2" 2 258 "0x2000"
d G "NCO_PULSE_WIDTH_4" 2 259 "0x4000"
d G "NCO_PULSE_WIDTH_8" 2 260 "0x6000"
d G "NCO_PULSE_WIDTH_16" 2 261 "0x8000"
d G "NCO_PULSE_WIDTH_32" 2 262 "0xA000"
d G "NCO_PULSE_WIDTH_64" 2 263 "0xC000"
d G "NCO_PULSE_WIDTH_128" 2 264 "0xE000"
c L "get_nco_inc_value" 2 3 4 "FUNCTION"
f N "setup_clc1" 2 273 ""
v L "mode" 2 273 "int32" `125 
f B "setup_clc1" 2 273 "void(int32 mode)" `124 
f N "clc1_setup_input" 2 274 ""
v L "input" 2 274 "int8" `127 
v L "selection" 2 274 "int8" `128 
f B "clc1_setup_input" 2 274 "void(int8 input,int8 selection)" `126 
f N "clc1_setup_gate" 2 275 ""
v L "gate" 2 275 "int8" `130 
v L "mode" 2 275 "int16" `131 
f B "clc1_setup_gate" 2 275 "void(int8 gate,int16 mode)" `129  "Constants used in SETUP_CLCx() are:"
d G "CLC_ENABLED" 2 277 "0x080"
d G "CLC_DISABLED" 2 278 "0"
d G "CLC_OUTPUT" 2 279 "0x040"
d G "CLC_INT_L_TO_H" 2 280 "0x010"
d G "CLC_INT_H_TO_L" 2 281 "0x008"
d G "CLC_OUTPUT_INVERTED" 2 282 "0x100"
d G "CLC_MODE_AND_OR" 2 284 "0x000"
d G "CLC_MODE_OR_XOR" 2 285 "0x001"
d G "CLC_MODE_AND" 2 286 "0x002"
d G "CLC_MODE_SR_LATCH" 2 287 "0x003"
d G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 2 288 "0x004"
d G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 2 289 "0x005"
d G "CLC_MODE_JK_FLIP_FLOP" 2 290 "0x006"
d G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 2 291 "0x007"
d G "CLC_INPUT_0" 2 295 "0"
d G "CLC_INPUT_1" 2 296 "0x01"
d G "CLC_INPUT_2" 2 297 "0x02"
d G "CLC_INPUT_3" 2 298 "0x03"
d G "CLC_INPUT_4" 2 299 "0x04"
d G "CLC_INPUT_5" 2 300 "0x05"
d G "CLC_INPUT_6" 2 301 "0x06"
d G "CLC_INPUT_7" 2 302 "0x07"
d G "CLC_GATE_AND" 2 305 "0x155"
d G "CLC_GATE_NAND" 2 306 "0x055"
d G "CLC_GATE_NOR" 2 307 "0x1AA"
d G "CLC_GATE_OR" 2 308 "0x0AA"
d G "CLC_GATE_CLEAR" 2 309 "0"
d G "CLC_GATE_SET" 2 310 "0x100"
c L "clc1_setup_gate" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 317 ""
v L "mode" 2 317 "int16" `134 
f B "setup_oscillator" 2 317 "int8(int16 mode)" `133  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 320 "0"
d G "OSC_250KHZ" 2 321 "0x10"
d G "OSC_500KHZ" 2 322 "0x20"
d G "OSC_1MHZ" 2 323 "0x30"
d G "OSC_2MHZ" 2 324 "0x40"
d G "OSC_4MHZ" 2 325 "0x50"
d G "OSC_8MHZ" 2 326 "0x60"
d G "OSC_16MHZ" 2 327 "0x70"
d G "OSC_CLKOUT" 2 329 "0x4000"
d G "OSC_HFINTRC_STABLE" 2 331 "1"
d G "OSC_HFINTRC_READY" 2 332 "8"
d G "OSC_LFINTRC_READY" 2 333 "2"
c L "setup_oscillator" 2 3 3 "FUNCTION"
f N "setup_pwm1" 2 338 ""
v L "mode" 2 338 "int8" `136 
f B "setup_pwm1" 2 338 "void(int8 mode)" `135 
f N "set_pwm1_duty" 2 339 ""
v L "value" 2 339 "int16" `138 
f B "set_pwm1_duty" 2 339 "void(int16 value)" `137 
f N "setup_pwm2" 2 340 ""
v L "mode" 2 340 "int8" `140 
f B "setup_pwm2" 2 340 "void(int8 mode)" `139 
f N "set_pwm2_duty" 2 341 ""
v L "value" 2 341 "int16" `142 
f B "set_pwm2_duty" 2 341 "void(int16 value)" `141  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 2 343 "0x80"
d G "PWM_DISABLED" 2 344 "0x10000"
d G "PWM_OUTPUT" 2 345 "0x40"
d G "PWM_ACTIVE_LOW" 2 346 "0x10"
d G "PWM_ACTIVE_HIGH" 2 347 "0"
c L "set_pwm2_duty" 2 3 4 "FUNCTION"
f N "setup_adc" 2 358 ""
v L "mode" 2 358 "int16" `146 
f B "setup_adc" 2 358 "void(int16 mode)" `145 
f N "read_adc" 2 359 ""
f B "read_adc" 2 359 "int8()" `147 
f N "read_adc" 2 360 ""
v L "mode" 2 360 "int8" `149 
f B "read_adc" 2 360 "int8(int8 mode)" `148 
f N "read_adc" 2 361 ""
f B "read_adc" 2 361 "int16()" `150 
f N "read_adc" 2 362 ""
v L "mode" 2 362 "int8" `151 
f B "read_adc" 2 362 "int16(int8 mode,int8 pins)" `150 
f N "adc_done" 2 363 ""
f B "adc_done" 2 363 "int8(int8 mode,int8 pins)" `150  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 365 "0"
d G "ADC_CLOCK_DIV_2" 2 366 "0x100"
d G "ADC_CLOCK_DIV_4" 2 367 "0x80"
d G "ADC_CLOCK_DIV_8" 2 368 "0x20"
d G "ADC_CLOCK_DIV_16" 2 369 "0xA0"
d G "ADC_CLOCK_DIV_32" 2 370 "0x40"
d G "ADC_CLOCK_DIV_64" 2 371 "0xC0"
d G "ADC_CLOCK_INTERNAL" 2 372 "0x60"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 375 ""
v L "pins" 2 375 "int8" `152 
f B "setup_adc_ports" 2 375 "void(int8 pins)" `151 
f N "setup_adc_ports" 2 376 ""
v L "pins" 2 376 "int8" `154 
v L "reference" 2 376 "int8" `155 
f B "setup_adc_ports" 2 376 "void(int8 pins,int8 reference)" `153 
f N "set_analog_pins" 2 377 ""
v L "pin" 2 377 "int8" `157 
f B "set_analog_pins" 2 377 "void(int8 pin,*int8 _VA_LIST)" `156 
f N "set_adc_channel" 2 378 ""
v L "channel" 2 378 "int8" `160 
f B "set_adc_channel" 2 378 "void(int8 channel)" `159  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 381 "0x01" "| A0"
d G "sAN1" 2 382 "0x02" "| A1"
d G "sAN2" 2 383 "0x04" "| A2"
d G "NO_ANALOGS" 2 384 "0" "None"
d G "ALL_ANALOG" 2 385 "0x07" "A0 A1 A2"
d G "TEMPERATURE_INDICATOR" 2 389 "0x06"
d G "FVR_CHANNEL" 2 390 "0x07"
d G "ADC_START_AND_READ" 2 393 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 394 "1"
d G "ADC_READ_ONLY" 2 395 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 401 ""
v L "x" 2 401 "sint8" `162 
f B "abs" 2 401 "sint8(sint8 x)" `161 
f N "abs" 2 402 ""
v L "x" 2 402 "sint16" `164 
f B "abs" 2 402 "sint16(sint16 x)" `163 
f N "abs" 2 403 ""
v L "x" 2 403 "sint32" `166 
f B "abs" 2 403 "sint32(sint32 x)" `165 
f N "abs" 2 404 ""
v L "x" 2 404 "float" `168 
f B "abs" 2 404 "float(float x)" `167 
f N "_mul" 2 405 ""
v L "??65535" 2 405 "int8" `170 
v L "??65535" 2 405 "int8" `171 
f B "_mul" 2 405 "int16(int8 ,int8 )" `169 
f N "_mul" 2 406 ""
v L "??65535" 2 406 "sint8" `173 
v L "??65535" 2 406 "sint8" `174 
f B "_mul" 2 406 "sint16(sint8 ,sint8 )" `172 
f N "_mul" 2 407 ""
v L "??65535" 2 407 "int16" `176 
v L "??65535" 2 407 "int16" `177 
f B "_mul" 2 407 "int32(int16 ,int16 )" `175 
f N "_mul" 2 408 ""
v L "??65535" 2 408 "sint16" `179 
v L "??65535" 2 408 "sint16" `180 
f B "_mul" 2 408 "sint32(sint16 ,sint16 )" `178  "Memory Manipulation Prototypes:"
f N "read_bank" 2 411 ""
v L "bank" 2 411 "int8" `182 
v L "offset" 2 411 "int8" `183 
f B "read_bank" 2 411 "int8(int8 bank,int8 offset)" `181 
f N "write_bank" 2 412 ""
v L "bank" 2 412 "int8" `185 
v L "offset" 2 412 "int8" `186 
v L "value" 2 412 "int8" `187 
f B "write_bank" 2 412 "void(int8 bank,int8 offset,int8 value)" `184 
f N "strcpy" 2 413 ""
v L "dest" 2 413 "*int8" `189 
v L "src" 2 413 "*int8" `190 
f B "strcpy" 2 413 "void(*int8 dest,*int8 src)" `188 
f N "memset" 2 414 ""
v L "destination" 2 414 "*int8" `192 
v L "value" 2 414 "int8" `193 
v L "num" 2 414 "int16" `194 
f B "memset" 2 414 "void(*int8 destination,int8 value,int16 num)" `191 
f N "memcpy" 2 415 ""
v L "destination" 2 415 "*int8" `196 
v L "source" 2 415 "*int8" `197 
v L "num" 2 415 "int16" `198 
f B "memcpy" 2 415 "void(*int8 destination,*int8 source,int16 num)" `195  "String Prototypes:"
f N "toupper" 2 418 ""
v L "cvalue" 2 418 "int8" `200 
f B "toupper" 2 418 "int8(int8 cvalue)" `199 
f N "tolower" 2 419 ""
v L "cvalue" 2 419 "int8" `202 
f B "tolower" 2 419 "int8(int8 cvalue)" `201 
f N "sprintf" 2 420 ""
v L "string" 2 420 "*int8" `204 
v L "cstring" 2 420 "*int8" `205 
f B "sprintf" 2 420 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `203  "Data Manipulators Prototypes:"
f N "shift_left" 2 423 ""
v L "address" 2 423 "*int8" `208 
v L "bytes" 2 423 "int8" `209 
v L "value" 2 423 "int8" `210 
f B "shift_left" 2 423 "int8(*int8 address,int8 bytes,int8 value)" `207 
f N "shift_right" 2 424 ""
v L "address" 2 424 "*int8" `212 
v L "bytes" 2 424 "int8" `213 
v L "value" 2 424 "int8" `214 
f B "shift_right" 2 424 "int8(*int8 address,int8 bytes,int8 value)" `211 
f N "rotate_left" 2 425 ""
v L "address" 2 425 "*int8" `216 
v L "bytes" 2 425 "int8" `217 
f B "rotate_left" 2 425 "void(*int8 address,int8 bytes)" `215 
f N "rotate_right" 2 426 ""
v L "address" 2 426 "*int8" `219 
v L "bytes" 2 426 "int8" `220 
f B "rotate_right" 2 426 "void(*int8 address,int8 bytes)" `218 
f N "swap" 2 427 ""
v L "value" 2 427 "int8" `222 
f B "swap" 2 427 "void(int8 value)" `221 
f N "make8" 2 428 ""
v L "var" 2 428 "int16" `224 
v L "offset" 2 428 "int8" `225 
f B "make8" 2 428 "int8(int16 var,int8 offset)" `223 
f N "make8" 2 429 ""
v L "var" 2 429 "int32" `227 
v L "offset" 2 429 "int8" `228 
f B "make8" 2 429 "int8(int32 var,int8 offset)" `226 
f N "make16" 2 430 ""
v L "varhigh" 2 430 "int8" `230 
v L "varlow" 2 430 "int8" `231 
f B "make16" 2 430 "int16(int8 varhigh,int8 varlow)" `229 
f N "make32" 2 431 ""
v L "var1" 2 431 "int16" `233 
f B "make32" 2 431 "int32(int16 var1)" `232 
f N "make32" 2 432 ""
v L "var1" 2 432 "int16" `235 
v L "var2" 2 432 "int16" `236 
f B "make32" 2 432 "int32(int16 var1,int16 var2)" `234 
f N "make32" 2 433 ""
v L "var1" 2 433 "int16" `238 
v L "var2" 2 433 "int8" `239 
f B "make32" 2 433 "int32(int16 var1,int8 var2)" `237 
f N "make32" 2 434 ""
v L "var1" 2 434 "int16" `241 
v L "var2" 2 434 "int8" `242 
v L "var3" 2 434 "int8" `243 
f B "make32" 2 434 "int32(int16 var1,int8 var2,int8 var3)" `240 
f N "make32" 2 435 ""
v L "var1" 2 435 "int8" `245 
f B "make32" 2 435 "int32(int8 var1)" `244 
f N "make32" 2 436 ""
v L "var1" 2 436 "int8" `247 
v L "var2" 2 436 "int8" `248 
f B "make32" 2 436 "int32(int8 var1,int8 var2)" `246 
f N "make32" 2 437 ""
v L "var1" 2 437 "int8" `250 
v L "var2" 2 437 "int8" `251 
v L "var3" 2 437 "int8" `252 
f B "make32" 2 437 "int32(int8 var1,int8 var2,int8 var3)" `249 
f N "make32" 2 438 ""
v L "var1" 2 438 "int8" `254 
v L "var2" 2 438 "int8" `255 
v L "var3" 2 438 "int8" `256 
v L "var4" 2 438 "int8" `257 
f B "make32" 2 438 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `253 
f N "make32" 2 439 ""
v L "var1" 2 439 "int8" `259 
v L "var2" 2 439 "int16" `260 
f B "make32" 2 439 "int32(int8 var1,int16 var2)" `258 
f N "make32" 2 440 ""
v L "var1" 2 440 "int8" `262 
v L "var2" 2 440 "int16" `263 
v L "var3" 2 440 "int8" `264 
f B "make32" 2 440 "int32(int8 var1,int16 var2,int8 var3)" `261 
f N "make32" 2 441 ""
v L "var1" 2 441 "int8" `266 
v L "var2" 2 441 "int8" `267 
v L "var3" 2 441 "int16" `268 
f B "make32" 2 441 "int32(int8 var1,int8 var2,int16 var3)" `265 
f N "bit_set" 2 442 ""
v L "var" 2 442 "int8" `270 
v L "bit" 2 442 "int8" `271 
f B "bit_set" 2 442 "void(int8 var,int8 bit)" `269 
f N "bit_set" 2 443 ""
v L "var" 2 443 "int16" `273 
v L "bit" 2 443 "int8" `274 
f B "bit_set" 2 443 "void(int16 var,int8 bit)" `272 
f N "bit_set" 2 444 ""
v L "var" 2 444 "int32" `276 
v L "bit" 2 444 "int8" `277 
f B "bit_set" 2 444 "void(int32 var,int8 bit)" `275 
f N "bit_clear" 2 445 ""
v L "var" 2 445 "int8" `279 
v L "bit" 2 445 "int8" `280 
f B "bit_clear" 2 445 "void(int8 var,int8 bit)" `278 
f N "bit_clear" 2 446 ""
v L "var" 2 446 "int16" `282 
v L "bit" 2 446 "int8" `283 
f B "bit_clear" 2 446 "void(int16 var,int8 bit)" `281 
f N "bit_clear" 2 447 ""
v L "var" 2 447 "int32" `285 
v L "bit" 2 447 "int8" `286 
f B "bit_clear" 2 447 "void(int32 var,int8 bit)" `284 
f N "bit_test" 2 448 ""
v L "var" 2 448 "int8" `288 
v L "bit" 2 448 "int8" `289 
f B "bit_test" 2 448 "int8(int8 var,int8 bit)" `287 
f N "bit_test" 2 449 ""
v L "var" 2 449 "int16" `291 
v L "bit" 2 449 "int8" `292 
f B "bit_test" 2 449 "int8(int16 var,int8 bit)" `290 
f N "bit_test" 2 450 ""
v L "var" 2 450 "int32" `294 
v L "bit" 2 450 "int8" `295 
f B "bit_test" 2 450 "int8(int32 var,int8 bit)" `293  "#use delay() Prototypes:"
f N "delay_cycles" 2 453 ""
v L "count" 2 453 "int8" `297 
f B "delay_cycles" 2 453 "void(int8 count)" `296 
f N "delay_ms" 2 454 ""
v L "time" 2 454 "int16" `299 
f B "delay_ms" 2 454 "void(int16 time)" `298 
f N "delay_us" 2 455 ""
v L "time" 2 455 "int16" `301 
f B "delay_us" 2 455 "void(int16 time)" `300  "#use rs232() Prototypes:"
f N "putchar" 2 458 ""
v L "cdata" 2 458 "int8" `303 
f B "putchar" 2 458 "void(int8 cdata)" `302 
f N "putchar" 2 459 ""
v L "cdata" 2 459 "int8" `305 
v L "stream" 2 459 "int8" `306 
f B "putchar" 2 459 "void(int8 cdata,int8 stream)" `304 
f N "puts" 2 460 ""
v L "string" 2 460 "*int8" `308 
f B "puts" 2 460 "void(*int8 string)" `307 
f N "puts" 2 461 ""
v L "string" 2 461 "*int8" `310 
v L "stream" 2 461 "int8" `311 
f B "puts" 2 461 "void(*int8 string,int8 stream)" `309 
f N "getch" 2 462 ""
f B "getch" 2 462 "int8()" `312 
f N "getch" 2 463 ""
v L "stream" 2 463 "int8" `314 
f B "getch" 2 463 "int8(int8 stream)" `313 
f N "gets" 2 464 ""
v L "string" 2 464 "*int8" `316 
f B "gets" 2 464 "void(*int8 string)" `315 
f N "gets" 2 465 ""
v L "string" 2 465 "*int8" `318 
v L "stream" 2 465 "int8" `319 
f B "gets" 2 465 "void(*int8 string,int8 stream)" `317 
f N "kbhit" 2 466 ""
f B "kbhit" 2 466 "int8()" `320 
f N "kbhit" 2 467 ""
v L "stream" 2 467 "int8" `322 
f B "kbhit" 2 467 "int8(int8 stream)" `321 
f N "printf" 2 468 ""
v L "string" 2 468 "*int8" `324 
f B "printf" 2 468 "void(*int8 string,*int8 _VA_LIST)" `323 
f N "fprintf" 2 469 ""
v L "stream" 2 469 "int8" `327 
v L "string" 2 469 "*int8" `328 
f B "fprintf" 2 469 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `326 
f N "putc_send" 2 470 ""
f B "putc_send" 2 470 "void()" `330 
f N "fputc_send" 2 471 ""
v L "stream" 2 471 "int8" `332 
f B "fputc_send" 2 471 "void(int8 stream)" `331 
f N "rcv_buffer_full" 2 472 ""
f B "rcv_buffer_full" 2 472 "int8()" `333 
f N "rcv_buffer_full" 2 473 ""
v L "stream" 2 473 "int8" `335 
f B "rcv_buffer_full" 2 473 "int8(int8 stream)" `334 
f N "rcv_buffer_bytes" 2 474 ""
f B "rcv_buffer_bytes" 2 474 "int16()" `336 
f N "rcv_buffer_bytes" 2 475 ""
v L "stream" 2 475 "int8" `338 
f B "rcv_buffer_bytes" 2 475 "int16(int8 stream)" `337 
f N "tx_buffer_full" 2 476 ""
f B "tx_buffer_full" 2 476 "int8()" `339 
f N "tx_buffer_full" 2 477 ""
v L "stream" 2 477 "int8" `341 
f B "tx_buffer_full" 2 477 "int8(int8 stream)" `340 
f N "tx_buffer_bytes" 2 478 ""
f B "tx_buffer_bytes" 2 478 "int16()" `342 
f N "tx_buffer_bytes" 2 479 ""
v L "stream" 2 479 "int8" `344 
f B "tx_buffer_bytes" 2 479 "int16(int8 stream)" `343  "#use i2c() Prototypes:"
f N "i2c_read" 2 482 ""
f B "i2c_read" 2 482 "int8()" `345 
f N "i2c_read" 2 483 ""
v L "stream" 2 483 "int8" `347 
f B "i2c_read" 2 483 "int8(int8 stream)" `346 
f N "i2c_read" 2 484 ""
v L "stream" 2 484 "int8" `349 
v L "ack" 2 484 "int8" `350 
f B "i2c_read" 2 484 "int8(int8 stream,int8 ack)" `348 
f N "i2c_write" 2 485 ""
v L "data" 2 485 "int8" `352 
f B "i2c_write" 2 485 "int8(int8 data)" `351 
f N "i2c_write" 2 486 ""
v L "stream" 2 486 "int8" `354 
v L "data" 2 486 "int8" `355 
f B "i2c_write" 2 486 "int8(int8 stream,int8 data)" `353 
f N "i2c_start" 2 487 ""
f B "i2c_start" 2 487 "void()" `356 
f N "i2c_start" 2 488 ""
v L "stream" 2 488 "int8" `358 
f B "i2c_start" 2 488 "void(int8 stream)" `357 
f N "i2c_start" 2 489 ""
v L "stream" 2 489 "int8" `360 
v L "restart" 2 489 "int8" `361 
f B "i2c_start" 2 489 "void(int8 stream,int8 restart)" `359 
f N "i2c_stop" 2 490 ""
f B "i2c_stop" 2 490 "void()" `362 
f N "i2c_stop" 2 491 ""
v L "stream" 2 491 "int8" `364 
f B "i2c_stop" 2 491 "void(int8 stream)" `363 
f N "i2c_isr_state" 2 492 ""
f B "i2c_isr_state" 2 492 "int8()" `365 
f N "i2c_slaveaddr" 2 493 ""
v L "addr" 2 493 "int8" `367 
f B "i2c_slaveaddr" 2 493 "void(int8 addr)" `366 
f N "i2c_slaveaddr" 2 494 ""
v L "stream" 2 494 "int8" `369 
v L "addr" 2 494 "int8" `370 
f B "i2c_slaveaddr" 2 494 "void(int8 stream,int8 addr)" `368 
f N "i2c_poll" 2 495 ""
f B "i2c_poll" 2 495 "int8()" `371 
f N "i2c_poll" 2 496 ""
v L "stream" 2 496 "int8" `373 
f B "i2c_poll" 2 496 "int8(int8 stream)" `372 
f N "i2c_init" 2 497 ""
v L "baud" 2 497 "int32" `375 
f B "i2c_init" 2 497 "void(int32 baud)" `374 
f N "i2c_init" 2 498 ""
v L "stream" 2 498 "int8" `377 
v L "baud" 2 498 "int32" `378 
f B "i2c_init" 2 498 "void(int8 stream,int32 baud)" `376  "#use spi() Prototypes:"
f N "spi_xfer" 2 501 ""
f B "spi_xfer" 2 501 "int8()" `379 
f N "spi_xfer" 2 502 ""
f B "spi_xfer" 2 502 "int16(int8 data)" `380 
f N "spi_xfer" 2 503 ""
f B "spi_xfer" 2 503 "int32(int8 data)" `380 
f N "spi_xfer" 2 504 ""
v L "data" 2 504 "int8" `381 
f B "spi_xfer" 2 504 "int8(int8 data)" `380 
f N "spi_xfer" 2 505 ""
v L "data" 2 505 "int16" `383 
f B "spi_xfer" 2 505 "int16(int16 data)" `382 
f N "spi_xfer" 2 506 ""
v L "data" 2 506 "int32" `385 
f B "spi_xfer" 2 506 "int32(int32 data)" `384 
f N "spi_xfer" 2 507 ""
v L "stream" 2 507 "int8" `387 
v L "data" 2 507 "int8" `388 
f B "spi_xfer" 2 507 "int8(int8 stream,int8 data)" `386 
f N "spi_xfer" 2 508 ""
v L "stream" 2 508 "int8" `390 
v L "data" 2 508 "int16" `391 
f B "spi_xfer" 2 508 "int16(int8 stream,int16 data)" `389 
f N "spi_xfer" 2 509 ""
v L "stream" 2 509 "int8" `393 
v L "data" 2 509 "int32" `394 
f B "spi_xfer" 2 509 "int32(int8 stream,int32 data)" `392 
f N "spi_xfer" 2 510 ""
v L "stream" 2 510 "int8" `396 
v L "data" 2 510 "int8" `397 
v L "bits" 2 510 "int8" `398 
f B "spi_xfer" 2 510 "int8(int8 stream,int8 data,int8 bits)" `395 
f N "spi_xfer" 2 511 ""
v L "stream" 2 511 "int8" `400 
v L "data" 2 511 "int16" `401 
v L "bits" 2 511 "int8" `402 
f B "spi_xfer" 2 511 "int16(int8 stream,int16 data,int8 bits)" `399 
f N "spi_xfer" 2 512 ""
v L "stream" 2 512 "int8" `404 
v L "data" 2 512 "int32" `405 
v L "bits" 2 512 "int8" `406 
f B "spi_xfer" 2 512 "int32(int8 stream,int32 data,int8 bits)" `403 
f N "spi_init" 2 513 ""
v L "baud" 2 513 "int32" `408 
f B "spi_init" 2 513 "void(int32 baud)" `407 
f N "spi_init" 2 514 ""
v L "stream" 2 514 "int8" `410 
v L "baud" 2 514 "int32" `411 
f B "spi_init" 2 514 "void(int8 stream,int32 baud)" `409 
f N "spi_speed" 2 515 ""
v L "baud" 2 515 "int32" `413 
f B "spi_speed" 2 515 "void(int32 baud)" `412 
f N "spi_speed" 2 516 ""
v L "stream" 2 516 "int8" `415 
v L "baud" 2 516 "int32" `416 
f B "spi_speed" 2 516 "void(int8 stream,int32 baud)" `414 
f N "spi_speed" 2 517 ""
v L "stream" 2 517 "int8" `418 
v L "baud" 2 517 "int32" `419 
v L "clock" 2 517 "int32" `420 
f B "spi_speed" 2 517 "void(int8 stream,int32 baud,int32 clock)" `417 
f N "spi_prewrite" 2 518 ""
v L "data" 2 518 "int8" `422 
f B "spi_prewrite" 2 518 "void(int8 data)" `421 
f N "spi_prewrite" 2 519 ""
v L "data" 2 519 "int16" `424 
f B "spi_prewrite" 2 519 "void(int16 data)" `423 
f N "spi_prewrite" 2 520 ""
v L "data" 2 520 "int32" `426 
f B "spi_prewrite" 2 520 "void(int32 data)" `425 
f N "spi_prewrite" 2 521 ""
v L "??65535" 2 521 "int8" `428 
v L "data" 2 521 "int8" `429 
f B "spi_prewrite" 2 521 "void(int8 ,int8 data)" `427 
f N "spi_prewrite" 2 522 ""
v L "??65535" 2 522 "int8" `431 
v L "data" 2 522 "int16" `432 
f B "spi_prewrite" 2 522 "void(int8 ,int16 data)" `430 
f N "spi_prewrite" 2 523 ""
v L "??65535" 2 523 "int8" `434 
v L "data" 2 523 "int32" `435 
f B "spi_prewrite" 2 523 "void(int8 ,int32 data)" `433 
f N "spi_xfer_in" 2 524 ""
f B "spi_xfer_in" 2 524 "int8()" `436 
f N "spi_xfer_in" 2 525 ""
f B "spi_xfer_in" 2 525 "int16(int8 bits)" `437 
f N "spi_xfer_in" 2 526 ""
f B "spi_xfer_in" 2 526 "int32(int8 bits)" `437 
f N "spi_xfer_in" 2 527 ""
v L "bits" 2 527 "int8" `438 
f B "spi_xfer_in" 2 527 "int8(int8 bits)" `437 
f N "spi_xfer_in" 2 528 ""
v L "bits" 2 528 "int8" `440 
f B "spi_xfer_in" 2 528 "int16(int8 bits,int8 bits)" `439 
f N "spi_xfer_in" 2 529 ""
v L "bits" 2 529 "int8" `440 
f B "spi_xfer_in" 2 529 "int32(int8 bits,int8 bits)" `439 
f N "spi_xfer_in" 2 530 ""
v L "stream" 2 530 "int8" `440 
v L "bits" 2 530 "int8" `441 
f B "spi_xfer_in" 2 530 "int8(int8 stream,int8 bits)" `439 
f N "spi_xfer_in" 2 531 ""
v L "stream" 2 531 "int8" `440 
v L "bits" 2 531 "int8" `444 
f B "spi_xfer_in" 2 531 "int16(int8 stream,int8 bits,int8 task)" `442 
f N "spi_xfer_in" 2 532 ""
v L "stream" 2 532 "int8" `440 
v L "bits" 2 532 "int8" `444 
f B "spi_xfer_in" 2 532 "int32(int8 stream,int8 bits,int8 task)" `442  "#use rtos() Prototypes:"
f N "rtos_run" 2 535 ""
f B "rtos_run" 2 535 "void(int8 stream,int8 bits,int8 task)" `442 
f N "rtos_yield" 2 536 ""
f B "rtos_yield" 2 536 "void(int8 bits,int8 task)" `443 
f N "rtos_enable" 2 537 ""
v L "task" 2 537 "int8" `445 
f B "rtos_enable" 2 537 "void(int8 task)" `444 
f N "rtos_disable" 2 538 ""
v L "task" 2 538 "int8" `447 
f B "rtos_disable" 2 538 "void(int8 task)" `446 
f N "rtos_terminate" 2 539 ""
f B "rtos_terminate" 2 539 "void()" `448 
f N "rtos_await" 2 540 ""
v L "flag" 2 540 "int8" `450 
f B "rtos_await" 2 540 "void(int8 flag)" `449 
f N "rtos_wait" 2 541 ""
v L "sem" 2 541 "int8" `452 
f B "rtos_wait" 2 541 "void(int8 sem)" `451 
f N "rtos_signal" 2 542 ""
v L "sem" 2 542 "int8" `454 
f B "rtos_signal" 2 542 "void(int8 sem)" `453 
f N "rtos_msg_send" 2 543 ""
v L "task" 2 543 "int8" `456 
v L "msg" 2 543 "int8" `457 
f B "rtos_msg_send" 2 543 "void(int8 task,int8 msg)" `455 
f N "rtos_msg_read" 2 544 ""
f B "rtos_msg_read" 2 544 "int8()" `458 
f N "rtos_msg_poll" 2 545 ""
f B "rtos_msg_poll" 2 545 "int8()" `459 
f N "rtos_overrun" 2 546 ""
v L "task" 2 546 "int8" `461 
f B "rtos_overrun" 2 546 "int8(int8 task)" `460 
f N "rtos_stats" 2 547 ""
v L "task" 2 547 "int8" `463 
v L "stat" 2 547 "*int8" `464 
f B "rtos_stats" 2 547 "void(int8 task,*int8 stat)" `462  "#use timer() Prototypes:"
f N "get_ticks" 2 550 ""
f B "get_ticks" 2 550 "int8()" `465 
f N "get_ticks" 2 551 ""
f B "get_ticks" 2 551 "int16(int8 stream)" `466 
f N "get_ticks" 2 552 ""
f B "get_ticks" 2 552 "int32(int8 stream)" `466 
f N "get_ticks" 2 553 ""
v L "stream" 2 553 "int8" `467 
f B "get_ticks" 2 553 "int8(int8 stream)" `466 
f N "get_ticks" 2 554 ""
v L "stream" 2 554 "int8" `469 
f B "get_ticks" 2 554 "int16(int8 stream)" `468 
f N "get_ticks" 2 555 ""
v L "stream" 2 555 "int8" `469 
f B "get_ticks" 2 555 "int32(int8 stream)" `468 
f N "set_ticks" 2 556 ""
v L "value" 2 556 "int8" `469 
f B "set_ticks" 2 556 "void(int8 value)" `468 
f N "set_ticks" 2 557 ""
v L "value" 2 557 "int16" `471 
f B "set_ticks" 2 557 "void(int16 value)" `470 
f N "set_ticks" 2 558 ""
v L "value" 2 558 "int32" `473 
f B "set_ticks" 2 558 "void(int32 value)" `472 
f N "set_ticks" 2 559 ""
v L "stream" 2 559 "int8" `475 
v L "value" 2 559 "int8" `476 
f B "set_ticks" 2 559 "void(int8 stream,int8 value)" `474 
f N "set_ticks" 2 560 ""
v L "stream" 2 560 "int8" `478 
v L "value" 2 560 "int16" `479 
f B "set_ticks" 2 560 "void(int8 stream,int16 value)" `477 
f N "set_ticks" 2 561 ""
v L "stream" 2 561 "int8" `481 
v L "value" 2 561 "int32" `482 
f B "set_ticks" 2 561 "void(int8 stream,int32 value)" `480  "#use pwm() Prototypes:"
f N "pwm_on" 2 564 ""
f B "pwm_on" 2 564 "void()" `483 
f N "pwm_on" 2 565 ""
v L "stream" 2 565 "int8" `485 
f B "pwm_on" 2 565 "void(int8 stream)" `484 
f N "pwm_off" 2 566 ""
f B "pwm_off" 2 566 "void()" `486 
f N "pwm_off" 2 567 ""
v L "stream" 2 567 "int8" `488 
f B "pwm_off" 2 567 "void(int8 stream)" `487 
f N "pwm_set_duty" 2 568 ""
v L "duty" 2 568 "int16" `490 
f B "pwm_set_duty" 2 568 "void(int16 duty)" `489 
f N "pwm_set_duty" 2 569 ""
v L "stream" 2 569 "int8" `492 
v L "duty" 2 569 "int16" `493 
f B "pwm_set_duty" 2 569 "void(int8 stream,int16 duty)" `491 
f N "pwm_set_duty_percent" 2 570 ""
v L "percent" 2 570 "int16" `495 
f B "pwm_set_duty_percent" 2 570 "void(int16 percent)" `494 
f N "pwm_set_duty_percent" 2 571 ""
v L "stream" 2 571 "int8" `497 
v L "percent" 2 571 "int16" `498 
f B "pwm_set_duty_percent" 2 571 "void(int8 stream,int16 percent)" `496 
f N "pwm_set_frequency" 2 572 ""
v L "frequency" 2 572 "int32" `500 
f B "pwm_set_frequency" 2 572 "void(int32 frequency)" `499 
f N "pwm_set_frequency" 2 573 ""
v L "stream" 2 573 "int8" `502 
v L "frequency" 2 573 "int32" `503 
f B "pwm_set_frequency" 2 573 "void(int8 stream,int32 frequency)" `501  "#use capture() Prototypes:"
f N "get_capture_time" 2 576 ""
f B "get_capture_time" 2 576 "int16()" `504 
f N "get_capture_time" 2 577 ""
v L "stream" 2 577 "int8" `506 
f B "get_capture_time" 2 577 "int16(int8 stream)" `505 
f N "get_capture_event" 2 578 ""
f B "get_capture_event" 2 578 "int8()" `507 
f N "get_capture_event" 2 579 ""
v L "stream" 2 579 "int8" `509 
f B "get_capture_event" 2 579 "int8(int8 stream)" `508  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 592 ""
v L "address" 2 592 "int16" `511 
f B "goto_address" 2 592 "void(int16 address)" `510 
f N "label_address" 2 593 ""
v L "label" 2 593 "int16" `513 
f B "label_address" 2 593 "int16(int16 label)" `512  "Program Memory Prototypes:"
f N "read_program_memory" 2 596 ""
v L "address" 2 596 "int16" `515 
v L "dataptr" 2 596 "*int8" `516 
v L "count" 2 596 "int16" `517 
f B "read_program_memory" 2 596 "void(int16 address,*int8 dataptr,int16 count)" `514 
f N "read_program_eeprom" 2 597 ""
v L "address" 2 597 "int16" `519 
f B "read_program_eeprom" 2 597 "int16(int16 address)" `518 
f N "write_program_memory" 2 598 ""
v L "address" 2 598 "int16" `521 
v L "dataptr" 2 598 "*int8" `522 
v L "count" 2 598 "int16" `523 
f B "write_program_memory" 2 598 "void(int16 address,*int8 dataptr,int16 count)" `520 
f N "write_program_eeprom" 2 599 ""
v L "address" 2 599 "int16" `525 
v L "data" 2 599 "int16" `526 
f B "write_program_eeprom" 2 599 "void(int16 address,int16 data)" `524  "INT"
c L "write_program_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 606 ""
v L "interrupt" 2 606 "int32" `528 
f B "enable_interrupts" 2 606 "void(int32 interrupt)" `527 
f N "disable_interrupts" 2 607 ""
v L "interrupt" 2 607 "int32" `530 
f B "disable_interrupts" 2 607 "void(int32 interrupt)" `529 
f N "clear_interrupt" 2 608 ""
v L "interrupt" 2 608 "int32" `532 
f B "clear_interrupt" 2 608 "void(int32 interrupt)" `531 
f N "interrupt_active" 2 609 ""
v L "interrupt" 2 609 "int32" `534 
f B "interrupt_active" 2 609 "int8(int32 interrupt)" `533 
f N "interrupt_enabled" 2 610 ""
v L "interrupt" 2 610 "int32" `536 
f B "interrupt_enabled" 2 610 "int8(int32 interrupt)" `535 
f N "ext_int_edge" 2 611 ""
v L "source" 2 611 "int8" `538 
v L "edge" 2 611 "int8" `539 
f B "ext_int_edge" 2 611 "void(int8 source,int8 edge)" `537 
f N "jump_to_isr" 2 612 ""
v L "address" 2 612 "int16" `541 
f B "jump_to_isr" 2 612 "void(int16 address)" `540  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 614 "0x40"
d G "H_TO_L" 2 615 "0"
d G "GLOBAL" 2 617 "0x0BC0"
d G "PERIPH" 2 618 "0x0B40"
d G "INT_RTCC" 2 619 "0x300B20"
d G "INT_EXT_L2H" 2 620 "0x50000B10"
d G "INT_EXT_H2L" 2 621 "0x60000B10"
d G "INT_EXT" 2 622 "0x300B10"
d G "INT_TIMER0" 2 623 "0x300B20"
d G "INT_RA" 2 624 "0x30FF0B08"
d G "INT_TIMER2" 2 625 "0x300D02"
d G "INT_CLC1" 2 626 "0x300D08"
d G "INT_NCO1" 2 627 "0x300D10"
d G "INT_AD" 2 628 "0x300D40"
d G "INT_RA0" 2 629 "0x30010B08"
d G "INT_RA0_L2H" 2 630 "0x10010B08"
d G "INT_RA0_H2L" 2 631 "0x20010B08"
d G "INT_RA1" 2 632 "0x30020B08"
d G "INT_RA1_L2H" 2 633 "0x10020B08"
d G "INT_RA1_H2L" 2 634 "0x20020B08"
d G "INT_RA2" 2 635 "0x30040B08"
d G "INT_RA2_L2H" 2 636 "0x10040B08"
d G "INT_RA2_H2L" 2 637 "0x20040B08"
d G "INT_RA3" 2 638 "0x30080B08"
d G "INT_RA3_L2H" 2 639 "0x10080B08"
d G "INT_RA3_H2L" 2 640 "0x20080B08"
F N "main" 0 6 ""
F G "main" 0 7 "void(int8 )" `546 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "input_a" 0 0
F B "set_tris_a" 1 0
F B "get_tris_a" 0 0
F B "input_change_a" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "set_analog_pins" 0 255
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_pwm1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_pwm2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
